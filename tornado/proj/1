import json
import subprocess
import os
from celery import Celery
from proj.celery import app
from proj.db import mongoOps
import config
from crontab import CronTab
from healthCheck import handlerHosts 
from handler.proj_log import log
#coding:utf-8
#used for look for playbook path
def getProjPath():
    totalPath=os.getcwdu() 
    thePath=totalPath[:totalPath.find('tornado')+8]
    return thePath
def judgeServerAlive(srvList):
    retDict={}
    for srv in srvList:
        param='ping ' +srv + ' -c 2'
        try:
            retVal=subprocess.check_output([param],shell=True)
            osInfo = getOSInfo(srv)  # get update infomation
            mongoOps.db().servers.update({'ip':srv},{'$set':{'status':'Active'}})
            retDict[srv]='Active'
        except subprocess.CalledProcessError,e:
           mongoOps.db().servers.update({'ip':srv},{'$set':{'status':'Error'}}) 
           retDict[srv]='Error'
    return retDict
         
def getOSInfo(ip):
        try:
          ansible_param='/usr/bin/ansible '+ip + ' -i '+ ip + ', -m setup'
          retVal=subprocess.check_output([ansible_param] ,shell=True)
          log().info('receive getOSInfo::'+str(retVal))
          first=retVal.index('{')
          last=retVal.rindex('}')
          ansi_obj=json.loads(retVal[first:last+1])
          if ansi_obj['ansible_facts']['ansible_distribution']=='AIX':
             name=ansi_obj['ansible_facts']['ansible_nodename']
             hconf=str(ansi_obj['ansible_facts']['ansible_processor_cores'])+'C/'+\
             str(ansi_obj['ansible_facts']['ansible_memtotal_mb'])+'MB'
             os=ansi_obj['ansible_facts']['ansible_distribution']+' '+ansi_obj['ansible_facts']['ansible_distribution_version']\
             +'.'+ansi_obj['ansible_facts']['ansible_distribution_release'] 
             hvisor=ansi_obj['ansible_facts']['ansible_processor']
          elif ansi_obj['ansible_facts']['ansible_distribution']=='HP-UX':
             name=ansi_obj['ansible_facts']['ansible_nodename']
             hvisor=ansi_obj['ansible_facts']['ansible_virtualization_type']
             os=ansi_obj['ansible_facts']['ansible_distribution']+' '+ansi_obj['ansible_facts']['ansible_distribution_version']\
             +'.'+ansi_obj['ansible_facts']['ansible_distribution_release']
             hconf=str(ansi_obj['ansible_facts']['ansible_processor_cores'])+'C/'+\
             str(ansi_obj['ansible_facts']['ansible_memtotal_mb'])+'MB'
          else:
             name=ansi_obj['ansible_facts']['ansible_nodename']
             hvisor=ansi_obj['ansible_facts']['ansible_virtualization_type']
             os=ansi_obj['ansible_facts']['ansible_distribution']+' '+ansi_obj['ansible_facts']['ansible_distribution_version']
             hconf=str(ansi_obj['ansible_facts']['ansible_processor_cores'])+'C/'+\
             str(ansi_obj['ansible_facts']['ansible_memtotal_mb'])+'MB'
          return {'name':name,'hvisor':hvisor,'os':os,'hconf':hconf}
        except Exception , e:
             print str(e)
             return 'notalive'

def getHost(status):
      out=[]
      result=None
      if status=='all':
           result=mongoOps.db().servers.find({},{'_id':0})
      else:
           result=mongoOps.db().servers.find({'status':status},{'_id':0}) 
      if result is None:
         pass 
      else:
         for server in result:
             out.append(server['ip'])
      return out  
    
def getNeedUpdate():
    out=[]
    result=mongoOps.db().servers.find({'name':'DefaultName','status':'Active'},{'_id':0})
    if result is None:
       pass
    else:
       for server in result:
           out.append(server['ip'])
    return out

def addsshcredits(ip,user,passwd):
    ansible_os_param="/usr/bin/ansible " +ip + " -i " + ip + ", -m 'command' -a 'uname' -e 'ansible_user="+user+" ansible_ssh_pass="+passwd+"'"
    log().info('get OS Info::'+ansible_os_param)
    retVal=subprocess.check_output([ansible_os_param],shell=True)
    baseDir=''
    osType = retVal.split('>>')[1].strip()
    ansible_param=''
    if user == 'root':
       if osType.lower() == 'linux': 
          baseDir='/root/'
       elif osType.lower() == 'aix':
          baseDir='/'
       ansible_param="/usr/bin/ansible " + ip + " -i " + ip + ", -m authorized_key -a 'user="+user+" key={{ lookup(\"file\",\"/root/.ssh/id_rsa.pub\") }} path='"+baseDir+".ssh/authorized_keys''  -e 'ansible_user="+user+" ansible_ssh_pass="+passwd+"'"
    else:
       baseDir='/home/'+user+'/'
       ansible_param="/usr/bin/ansible " + ip + " -i " + ip + ", -m authorized_key -a 'user="+user+" key={{ lookup(\"file\",\""+str(baseDir)+".ssh/id_rsa.pub\") }} path='"+baseDir+".ssh/authorized_keys''  -e 'ansible_user="+user+" ansible_ssh_pass="+passwd+"'"
    log().info(ansible_param)
    retVal=subprocess.call([ansible_param],shell=True)   
    if retVal == 0 :
       return 'success'
    else:
       return 'fail'

@app.task           
def updateServerInfo(servers):
    if isinstance(servers,dict):
       addsshcredits(servers['ip'],servers['userid'],servers['password'])
       srvDict=getOSInfo(servers['ip']) 
       if srvDict == 'notalive':
          pass
       else:
          server={'name':srvDict['name'],'ip':servers['ip'],'os':srvDict['os'],'hconf':srvDict['hconf'],'hvisor':srvDict['hvisor'],'product':servers['product'], 'status':'Active'}
          mongoOps.db().servers.update({'ip':server['ip']},{'$set':server},upsert=True,multi=True) 
          
          for pro in servers['product'].split(','):   # 加入组
              handlerHosts.addIP(pro,servers['ip'])
          
    if isinstance(servers,list):
       for srv in servers:
           addsshcredits(srv['ip'],srv['userid'],srv['password'])
       for srvip in servers:
           srvDict=getOSInfo(srvip['ip'])
           if srvDict == 'notalive':
              pass
           else:
              server={'name':srvDict['name'],'ip':srvip['ip'],'os':srvDict['os'],'hconf':srvDict['hconf'],'hvisor':srvDict['hvisor'], 'status':'Active'}
              mongoOps.db().servers.update({'ip':server['ip']},{'$set':server},upsert=True,multi=True) 


@app.task
def deploy_run_playbook(ymlName,jsonPath):
    #sendCommand='/usr/bin/ansible-playbook ' + '/opt/tornado/playbooks/'+ymlName+'.yml -e @'+jsonPath
    sendCommand='/usr/bin/ansible-playbook ' + getProjPath()+'/playbooks/deploy/'+ymlName+'.yml -e @'+jsonPath
    log().info(sendCommand)
    retVal=subprocess.call([sendCommand],shell=True)

# run immediately
@app.task
def healthCheck_run_playbook(job_uuid,jobDetail_uuid,jobTarget,ymlName,task_timestamp,job_if_daily,job_scheduled_at):
    sendCommand='/usr/bin/ansible-playbook ' + getProjPath()+'/playbooks/healthcheck/'\
    +ymlName+".yml -i "+jobTarget + "  -e 'task_timestamp="+task_timestamp+" jobDetail_uuid="+jobDetail_uuid+" job_uuid="+job_uuid+" ymlName="+ymlName+" job_if_daily="+job_if_daily+"'"
    log().info(sendCommand)
    if job_if_daily == '0' or job_if_daily == '1': #run immediately
       retVal = subprocess.call([sendCommand],shell=True)       
    elif job_if_daily == '2':   #run every day
       cron = CronTab(user='root')
       job=cron.new(sendCommand)
       job.setall(job_scheduled_at.split(':')[1],job_scheduled_at.split(':')[0],'*','*','*')
       cron.write(user='root')

#deprected
#@app.task
def healthCheck_run_playbook_on_time(job_uuid,jobDetail_uuid,jobTarget,ymlName,task_timestamp,job_if_daily,job_scheduled_at):
    sendCommand='/usr/bin/ansible-playbook ' + '/opt/tornado/playbooks/healthcheck/'\
    +ymlName+".yml -i " +jobTarget +" -e 'task_timestamp="+task_timestamp+" jobDetail_uuid="+jobDetail_uuid+" job_uuid="+job_uuid+" ymlName="+ymlName+" job_if_daily="+job_if_daily+"'"
    log().info(sendCommand)
    retVal = subprocess.call([sendCommand],shell=True)       
