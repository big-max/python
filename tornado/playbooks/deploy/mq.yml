---
- name: Configure ansible inventory
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Add hosts to the group named target_hosts
      add_host: >
        name="{{ item.0 }}" groups=target_hosts ansible_host="{{ item.1 }}" ipaddr="{{ item.1 }}"  mq_qmgr_name="{{ item.2 }}"
      with_together: 
        - "{{ hostname_list }}"
        - "{{ ip_list }}"
        - "{{ mq_qmgr_list }}"

- name: Install Environment
  hosts: target_hosts
  gather_facts: True
  strategy: linear
  tags:
    - install
  tasks:
    - name: Update the hostname of target servers is not aix
      hostname: name="{{ inventory_hostname }}"
      when: ansible_distribution != 'AIX'
    - name: Update the hostname of target servers is aix
      mod_chhostname: name="{{ inventory_hostname }}"
      when: ansible_distribution == 'AIX'
    - name: Add hostname to the file /etc/hosts
      lineinfile: dest=/etc/hosts regexp='^{{ item.0 }}.*{{ item.1 }}'  line="{{ item.0 }}        {{ item.1 }}" state=present backup=yes
      with_together: 
        - "{{ ip_list }}"
        - "{{ hostname_list }}"
    - name: Configure sysctl parameter
      sysctl: name={{ item.key }} value={{ item.value }} sysctl_set=yes reload=yes
      with_dict: "{{ os_para_sysctl }}"
      ignore_errors: yes
      when: ansible_distribution != 'AIX'
    - name: Configure system ulimit parameters
      ulimit: domain="{{ mq_user }}" type='-' item="{{ item.key }}" value="{{ item.value }}"
      with_dict: "{{ os_para_ulimit }}"
      when: ansible_distribution != 'AIX'
    - name: Create temp download directory
      file: path="{{ downloadpath }}/{{ mq_version }}/fp" state=directory mode=0755
    - name: Download MQ binary files
      get_url: 
        url: "ftp://{{ ftp_user }}:{{ ftp_password }}@{{ ftp_server }}/mq/{{ mq_version }}/{{ mq_binary }}"
        dest: "{{ downloadpath }}/{{ mq_version }}"
        timeout: 100
    - name: Uncompress MQ binary files  
      shell: gzip -d -f "{{ downloadpath }}/{{ mq_version }}/{{ mq_binary }}";tar -xf *.tar chdir="{{ downloadpath }}/{{ mq_version }}"
    - name: Download MQ fixpack files
      get_url: 
        url: "ftp://{{ ftp_user }}:{{ ftp_password }}@{{ ftp_server }}/mq/{{ mq_version }}/{{ mq_fp }}"
        dest: "{{ downloadpath }}/{{ mq_version }}/fp"
        timeout: 100
      when: mq_fp != '-'
    - name: Uncompress MQ fixpack files 
      shell: gzip -d -f "{{ downloadpath }}/{{ mq_version }}/fp/{{ mq_fp }}";tar -xf *.tar chdir="{{ downloadpath }}/{{ mq_version }}/fp"
      when: mq_fp != '-'
    - block:
       - name: Accept MQ product license
         shell: "{{ downloadpath }}/{{ mq_version }}/mqlicense.sh -accept"
       - name: Install MQ binary
         shell: rpm --prefix "{{ mq_inst_path }}" -ivh "{{ downloadpath }}/{{ mq_version }}/{{ mq_rpm }}"
       - name: Install MQ fixpack
         shell: rpm -Uvh "{{ downloadpath }}/{{ mq_version }}/fp/{{ mq_rpm }}"
         when: mq_fp != '-'
      when: ansible_distribution != 'AIX' 
    - block:
       - name: Install MQ binary
         shell: installp -acgXYd . all chdir="{{ downloadpath }}/{{ mq_version }}/MQServer"
       - name: Install MQ fixpack
         shell: installp -acgXYd . all chdir="{{ downloadpath }}/{{ mq_version }}/fp"
         when: mq_fp != '-'
      when: ansible_distribution == 'AIX'
    - name: Add the pre-defined user
      user: name="{{ mq_user }}" group=mqm append=yes
      when: mq_user != 'mqm'
    - name: Create Queue Manager data and log folders
      file: path="{{ item }}" state=directory owner="{{ mq_user }}" mode=0775
      with_items:
        - "{{ mq_data_path }}"
        - "{{ mq_log_path }}"

- name: Build Environment
  hosts: target_hosts
  gather_facts: false
  strategy: linear
  tags:
    - build
  environment:
    PATH: "{{ mq_inst_path }}/bin"
  tasks:
    - name: Setup MQ environment variables for MQ user
      lineinfile: >
        dest="~{{ mq_user }}/.profile" regexp='setmqenv'  line=". {{ mq_inst_path }}/bin/setmqenv -p {{ mq_inst_path }} -k"
        state=present backup=yes create=yes
      become_user: "{{ mq_user }}"
      become: yes
      become_method: su
    - name: Create Queue Managers instance
      shell: >
        /bin/su - "mqm" -c "{{ mq_inst_path }}/bin/crtmqm -md {{ mq_data_path }} -ld {{ mq_log_path }} -lc -lf {{ mq_log_psize }}
        -lp {{ mq_qmgr_plog }} -ls {{ mq_qmgr_slog }}  {{ mq_qmgr_name }}"
    - name: Append one blank line to qmini file
      shell: /bin/su - "mqm" -c "echo ' ' >> {{ mq_data_path }}/{{ mq_qmgr_name }}/qm.ini"
    - name: Start up Queue Manager instance
      command: /bin/su - "mqm" -c "{{ mq_inst_path }}/bin/strmqm {{ mq_qmgr_name }}"
    - name: Configure Queue Manager ini file
      blockinfile:
        dest: "{{ mq_data_path }}/{{ mq_qmgr_name }}/qm.ini"
        marker: ""
        block: |
          Channels:
            MaxChannels={{ mq_chl_max }}
            MaxActiveChannels={{ mq_chl_max }}
          TCP:
            KeepAlive={{ mq_chl_kalive }}
      become_user: "mqm"
      become: yes
      become_method: su
    - name: Create Queue Manager Objects
      shell: /bin/su - "mqm" -c "echo '{{ item }}' | runmqsc {{ mq_qmgr_name }}"
      with_items:
        - "DEF LSTR(LISTENER01) TRPTYPE(TCP) PORT({{ mq_lstr_port }}) CONTROL(QMGR) REPLACE"

- name: Restart Environment
  hosts: target_hosts
  gather_facts: false
  strategy: linear
  tags:
    - restart
  environment:
    PATH: "{{ mq_inst_path }}/bin"
  tasks:
    - name: stop QMGRs
      command: /bin/su - "mqm" -c "{{ mq_inst_path }}/bin/endmqm -i {{ mq_qmgr_name }}"
      register: result
    - name: start QMGRs
      command: /bin/su - "mqm" -c "{{ mq_inst_path }}/bin/strmqm {{ mq_qmgr_name }}"
      when: result.rc == 0
