#!/bin/sh
### VERSION:   4.1
###
### AUTHOR:    Justin Fries (justinf@us.ibm.com)
###
### COPYRIGHT:
### 
### (C) COPYRIGHT International Business Machines Corp. 2007-2015
### All Rights Reserved
### Licensed Materials - Property of IBM
###
### US Government Users Restricted Rights - Use, duplication or
### disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
###
### SYNOPSIS:
###
###   [.] mqconfig -?
###   [.] mqconfig [-v Version]
###   [.] mqconfig [-v Version] [-p Project]...     (Solaris only)
###
###          .  Source mqconfig to check the current shell
###         -?: Display extended help for the mqconfig script
###         -v: Check compatibility with an MQ version.release
###         -p: Check the resource settings of a Solaris project
###
### DESCRIPTION:
###
### The mqconfig script validates kernel parameters, user limits, shell options,
### and other settings on AIX, HP-UX, Linux and Solaris systems in order to make
### they meet the recommendations given in the IBM MQ Knowledge Center:
###
### www.ibm.com/support/knowledgecenter/SSFKSJ/mapfiles/product_welcome_wmq.htm
###
###
### Multiple versions of MQ may be installed on one system, so this script makes
### recommendations that are appropriate for all versions.  The '-v' option does
### not change the recommendations, but it does tell mqconfig to verify that the
### operating system and hardware meet the basic requirements published for that
### version.  The checks mqconfig makes are not exhaustive, so be sure to review
### the requirements online as well:
###
### www.ibm.com/support/docview.wss?uid=swg27006467
###
###
### The mqconfig script can be started using the "." or "source" command so that
### it can review the limits in the current user's shell.  Usually mqconfig runs
### just the same when sourced, but some shells do not pass arguments to sourced
### scripts.  Use the MQ_CONFIG_OPTIONS variable to pass command-line parameters
### to mqconfig in those environments.  For example:
###
###   sh> MQ_CONFIG_OPTIONS="-v 8.0"
###   sh> . ./mqconfig
###
###
### CAVEATS/WARNINGS:
###
### Successful validation by the mqconfig script confirms that your system meets
### the default IBM recommendations.  If your system is very heavily loaded, for
### example if you have many queue managers with very deep queues, many channels
### or client applications, many server applications, or if you are running some
### other enterprise software products on the same machine (application servers,
### databases, &c.) you might need to increase your settings beyond the defaults
### published by IBM and checked by mqconfig.
###
### The mqconfig script does print the current usage for certain parameters, but
### that is not possible for them all.  Run mqconfig during peak workload and it
### will issue a warning the usage for any measurable parameter exceeds 75%, and
### a failure if the usage exceeds 95%.  For more information on the parameters,
### refer to the MQ Knowledge Center and this technote:
###
### www.ibm.com/support/docview.wss?uid=swg21271236
###
###
### Some limits are defined on a per-user basis, for example by using the ulimit
### shell built-in command.  These limits must be configured for the 'mqm' user,
### and also for any other users in the 'mqm' group who may start MQ.  Since the
### membership in the mqm group may change at any time, mqconfig prints only the
### settings for the current user shell.  Each administrator should run mqconfig
### to confirm their settings before starting MQ.
### 
###
### RETURNED VALUES:
###
###   0  - Passed all tests
###   1  - Passed with warnings
###   2  - Failed some tests
###
###
### EXAMPLES:
###
### 1. To check your settings for IBM MQ:
###
###      mqconfig
###
###
### 2. To check MQ settings in the current shell:
###
###      MQ_CONFIG_OPTIONS=
###      . ./mqconfig
###
###
### 3. To check that your system can run IBM MQ V8.0:
###
###      MQ_CONFIG_OPTIONS="-v 8.0"
###      . ./mqconfig
###
###
### 4. To check the Solaris group.mqm and mqdev projects:
###
###      mqconfig -p group.mqm -p mqdev
###
###
### 5. To get help with the mqconfig script:
###
###      mqconfig -?
###



### Define functions to set any shell options necessary to this script and later
### restore them to their original setting.  Then turn off the nounset option or
### turn on its counterpart unset option, depending on which the shell supports, 
### before enabling the zsh 'shwordsplit' option.

  MQ_CONFIG_SetShellOption() {
    MQ_CONFIG_SHOPT=$1
    MQ_CONFIG_VALUE=$2

    case "$MQ_CONFIG_VALUE:`set -o 2>/dev/null | grep -w \"^$MQ_CONFIG_SHOPT\"`" in
      on:*off) eval MQ_CONFIG_RESTORE_$MQ_CONFIG_SHOPT=\"set +o $MQ_CONFIG_SHOPT\"
               set -o $MQ_CONFIG_SHOPT 1>/dev/null 2>&1
               ;;

      off:*on) eval MQ_CONFIG_RESTORE_$MQ_CONFIG_SHOPT=\"set -o $MQ_CONFIG_SHOPT\"
               set +o $MQ_CONFIG_SHOPT 1>/dev/null 2>&1
               ;;
    esac
  }

  MQ_CONFIG_RestoreShellOption() {
    MQ_CONFIG_SHOPT=$1

    eval MQ_CONFIG_VALUE=\$MQ_CONFIG_RESTORE_$MQ_CONFIG_SHOPT
    eval ${MQ_CONFIG_VALUE:=:}
    eval unset MQ_CONFIG_RESTORE_$MQ_CONFIG_SHOPT
  }

  if set -o 2>/dev/null | grep -w '^unset' 1>/dev/null 2>&1; then
    MQ_CONFIG_SetShellOption unset on
  else
    MQ_CONFIG_SetShellOption nounset off
  fi

  MQ_CONFIG_SetShellOption shwordsplit on


### Save the PATH and MQ_CONFIG_OPTIONS variables.  Check to see if we have been
### sourced by looking at the current shell and its arguments with ps instead of
### looking at the command line, which varies widely when this script is sourced
### in different shells.  If the second argument on the shell command line isn't
### the name of a script (i.e. anything other than an option flag), then presume
### we were sourced by the user.  Save the current or parent shell, depending on
### whether we were sourced, to check shell settings later.

  MQ_CONFIG_SAVED_PATH="$PATH"
  MQ_CONFIG_SOURCED=

  if [ -n "${MQ_CONFIG_OPTIONS+X}" ]; then
    MQ_CONFIG_SAVED_OPTIONS="$MQ_CONFIG_OPTIONS"
  fi

  MQ_CONFIG_CMDLINE_ARGS="$*"
  MQ_CONFIG_PS_ARGS="`env UNIX95=1 ps -o args= -p $$ 2>/dev/null`"
  MQ_CONFIG_SHELL="`printf \"%s\n\" \"$MQ_CONFIG_PS_ARGS\" |
    sed -e 's/ .*//' -e 's+.*/++' -e 's/^-//'`"
  MQ_CONFIG_SCRIPT="`printf \"%s \n\" \"$MQ_CONFIG_PS_ARGS\" |
    sed -e 's/ /,/' -e 's/ .*//' -e 's/.*,//' -e 's+.*/++'`"

  case "${MQ_CONFIG_SCRIPT:-N/A}" in
     -*) MQ_CONFIG_SOURCED=1
         ;;

    N/A) MQ_CONFIG_SOURCED=1
         ;;
  esac

  if [ -z "$MQ_CONFIG_SOURCED" ]; then
    MQ_CONFIG_PPID=`env UNIX95=1 ps -o ppid= -p $$ 2>/dev/null`
    MQ_CONFIG_SHELL="`env UNIX95=1 ps -o args= -p $MQ_CONFIG_PPID 2>/dev/null |
      sed -e 's/ .*//' -e 's+.*/++' -e 's/^-//'`"
  fi


### This function formats messages with caller-supplied inserts and ensures they
### will fit a standard 80-character line, before writing them to stdout.

  MQ_CONFIG_Message() {
    MQ_CONFIG_MSGID=$1; shift

    { case "${MQ_CONFIG_MSGID:=9999}" in
        1000) cat <<- :END
		Option $1 requires an argument.
		:END
              ;;

        1001) cat <<- :END
		Option $1 is not valid.
		:END
              ;;

        1002) cat <<- :END
		This script does not support $@.
		:END
              ;;

        1003) cat <<- :END
		MQ V$1 is not supported.
		:END
              ;;

        1004) cat <<- :END
		Unexpected parameter: $@
		:END
              ;;

        1005) if [ -n "$MQ_CONFIG_SOURCED" ]; then
                cat <<- :END
		V4.1 analyzing $1 in $MQ_CONFIG_SHELL on host $2.
		:END
              else
		cat <<- :END
		V4.1 analyzing $1 on host $2.
		:END
              fi
              ;;

        1006) cat <<- :END
		Project $1 does not exist.
		:END
              ;;

        1007) cat <<- :END
		No project given.  Analyzing $@.

		:END
              ;;

        1008) cat <<- :END
		You have a group.mqm project configured, but have started one or
		more queue managers under other projects $1.  Start MQ as
		someone whose primary group is mqm, or use the newtask command
		to ensure queue managers run in the correct project.
		:END
              ;;

        1009) cat <<- :END
		You do not have a group.mqm project configured.  IBM recommends
		that you configure a group.mqm project with resource limits for
		MQ, but you can run queue managers under other projects.  If
		you plan to use a different project for MQ, rerun mqconfig with
		the -p option to analyze that project.
		:END
              ;;

        1010) cat <<- :END
		MQ V$1 does not support $2 $3.
		:END
              ;;

        1011) cat <<- :END
		MQ V$1 is no longer supported by this script.
		Please download the mqconfig-old script from
		www.ibm.com/support/docview.wss?uid=swg21271236#mqconfig-old
		to analyze a MQ V$1 system.
		:END
              ;;

        1012) cat <<- :END
		MQ V7.0 requires AIX 5.3 Technology Level 4 or later, and at
		Technology Level 5 it requires Service Pack 2 or later, and
		at Technology Level 7 it requires Service Pack 1 or later.
		Please refer to the Systems Requirement page on the web for
		further details and current status.
		:END
              ;;

        1013) cat <<- :END
		MQ V$1 requires AIX $2 Technology Level $3 or later.
		:END
              ;;

        1014) cat <<- :END
		Source mqconfig to check the $1 $2 option: . $3 $4
		:END
              ;;

        1015) cat <<- :END
		The $1 program was not found on this system.  Please install
		$1 and try running mqconfig again.
		:END
              ;;

        1016) cat <<- :END
		HP-UX patch PHCO_36900 or later is required for MQ.  For details
		see www.ibm.com/support/docview.wss?uid=swg21270591
		:END
              ;;

        1017) cat <<- :END
		Using parameters from $1: $2
		:END
              ;;

        1018) cat <<- :END
		Your shell may not pass command line arguments to sourced scripts.
		If you did not pass the arguments '$1' to mqconfig, then set the
		MQ_CONFIG_OPTIONS variable to the options you want and source
		mqconfig again.  For example:

		MQ_CONFIG_OPTIONS=
		. /path/to/mqconfig

		MQ_CONFIG_OPTIONS="-v 8.0"
		. /path/to/mqconfig
		:END
              ;;

           *) cat <<- :END
		Cannot print message: $MQ_CONFIG_MSGID $@
		:END
              ;;
      esac } | env LANG=C tr -d '\t' | fmt -68 | {
        read MQ_CONFIG_LINE && printf "mqconfig: $MQ_CONFIG_LINE\n"
        while read MQ_CONFIG_LINE; do
          printf "          $MQ_CONFIG_LINE\n"
        done
    }

    return 0
  }


### This function prints a message to stderr, and when stdout is redirected to a
### file it also prints it there.  This ensures that any errors reported will be
### included in output sent to IBM.

  MQ_CONFIG_Error() {
    MQ_CONFIG_Message "$@" >&2

    if [ -t 2 -a ! -t 1 ]; then
      MQ_CONFIG_Message "$@"
    fi

    return 0
  }


### Print the script syntax for this operating system to stderr.

  MQ_CONFIG_PrintSyntax() {
    printf "%s\n" "syntax:   [.] mqconfig -?" >&2

    case "$MQ_CONFIG_OPSYS" in
      Solaris) printf "%s\n" "          [.] mqconfig [-v Version] [-p Project] ..." >&2
               ;;

            *) printf "%s\n" "          [.] mqconfig [-v Version]" >&2
               ;;
    esac

    printf "\n              Version: 8.0, 7.5, 7.1 or 7.0\n" >&2
    return 0
  }


### Display mqconfig usage help in order to address frequently asked questions.

  MQ_CONFIG_PrintHelp() {
    cat <<- :END
	Using mqconfig

	`MQ_CONFIG_PrintSyntax 2>&1 | sed 's/^/  /'`

	     .  Source mqconfig to check the current shell
	    -?: Display extended help for the mqconfig script
	    -v: Check compatibility with an MQ version.release
	:END

    if [ $MQ_CONFIG_OPSYS = Solaris ]; then
      cat <<- :END
	    -p: Check the resource settings of a Solaris project
	:END
    fi

    cat <<- :END


	  The mqconfig script validates kernel parameters, user limits, shell options,
	  and other settings on AIX, HP-UX, Linux and Solaris systems in order to make
	  sure they meet the recommendations given in the IBM MQ Knowledge Center:

	  www.ibm.com/support/knowledgecenter/SSFKSJ/mapfiles/product_welcome_wmq.htm


	  Multiple versions of MQ may be installed on one system, so this script makes
	  recommendations that are appropriate for all versions.  The '-v' option does
	  not change the recommendations, but it does tell mqconfig to verify that the
	  operating system and hardware meet the basic requirements published for that
	  version.  The checks mqconfig makes are not exhaustive, so be sure to review
	  the requirements online as well:

	  www.ibm.com/support/docview.wss?uid=swg27006467


	  The PASS/WARN/FAIL score assigned to each value is based on its proximity to
	  the IBM recommendation and the current usage, when known.  For example, when
	  IBM recommends a value of 10000, then low values like 2000 will fail, closer
	  values like 8000 will give a warning, and 10000 or above will pass.  However
	  mqconfig will issue a warning for values which exceed the IBM recommendation
	  if the resource usage is 75% or more, and a failure when the usage is 95% or
	  more.  In such cases, you must set a value which exceeds the recommendations
	  from IBM in order to run MQ without exhausting resources.

	:END

    if [ $MQ_CONFIG_OPSYS = Solaris ]; then
      cat <<- :END

	Solaris Projects

	  Solaris does not use one single global set of kernel parameters.  Instead you
	  must define projects, each with their own resource limits, and start programs
	  such as MQ in the correct project with the 'newtask' command.  IBM recommends
	  that you create a project called 'group.mqm' for use with MQ, but you can use
	  any project name you wish.

	  Run mqconfig with the -p option to name the projects under which you will run
	  MQ.  You can repeat the -p option to have mqconfig examine multiple projects.
	  If you do not provide any project names, mqconfig will analyze 'group.mqm' if
	  it exists, any others which appear to be running queue manager processes, and
	  the current project.  If mqconfig reports warnings and failures for a project
	  which you do not intend to use with MQ, re-run mqconfig with the -p option.

	:END
    fi

    cat <<- :END

	User Limits

	  The mqconfig script can be started using the "." or "source" command so that
	  it can review the limits in the current user's shell.  Usually mqconfig runs
	  just the same when sourced, but some shells do not pass arguments to sourced
	  scripts.  Use the MQ_CONFIG_OPTIONS variable to pass command-line parameters
	  or to ensure no parameters or passed when sourcing mqconfig.  For example:

	    sh> MQ_CONFIG_OPTIONS="-v 8.0"
	    sh> . ./mqconfig


	    sh> MQ_CONFIG_OPTIONS=
	    sh> . ./mqconfig


	  When you source mqconfig, it can reliably check shell options such as bgnice
	  which need to be adjusted for MQ.  The bgnice option should be turned off by
	  adding a line like "set +o bgnice" to your login profile (e.g. to .kshrc for
	  most Korn shell users) to avoid a potential performance problem when certain
	  MQ commands are started in the background (e.g. 'runmqlsr -t tcp -m QMA &').

	:END

    return 0
  }


### Helper functions to sum up resource usage numbers and to trim whitespace.

  MQ_CONFIG_Sum() {
    MQ_CONFIG_SUM=0

    while read MQ_CONFIG_NUM ; do
      MQ_CONFIG_SUM=`expr $MQ_CONFIG_SUM + $MQ_CONFIG_NUM`
    done

    printf "$MQ_CONFIG_SUM"
  }


  MQ_CONFIG_Trim() {
    sed -e 's/^[ 	]*//' -e 's/[ 	]*$//'
  }


### Determine the current usage of system resources, if the operating system has
### a method for providing that information.  For the per-user process count, we
### only examine the current user and any others with actively running processes
### for MQ (except for root), then report the highest number.  On Linux, threads
### are treated as processes by the kernel and must be counted thusly.  Although
### MQ processes have an effective user of mqm, they count against the real user
### who started MQ when the system enforces resource limits.

  MQ_CONFIG_GetResourceUsage() {
    MQ_CONFIG_PARAM=$1

    case $MQ_CONFIG_OPSYS:$MQ_CONFIG_PARAM in
            Linux:file-max) MQ_CONFIG_GetLinuxValue fs.file-nr sys/fs/file-nr | awk '{print $1}'
                            ;;

      *:maxup*|Linux:nproc) { for MQ_CONFIG_USER in `id -un 2>/dev/null` `env UNIX95=1 ps -e -o user= -o comm= |
                               egrep '[a]mqzxma0|[a]mqzmgr0' | awk '{print $1}' | sort -u`; do

                                if [ $MQ_CONFIG_USER != root ]; then
                                  env UNIX95=1 ps -o pid= -${MQ_CONFIG_PS_THREAD_FLAG}u $MQ_CONFIG_USER | wc -l
                                fi
                              done

                              printf "0\n"
                            } | sort -rn | head -n 1 | MQ_CONFIG_Trim
                            ;;

       Solaris:max-sem-ids) ipcs -sJ 2>/dev/null | grep -w $MQ_CONFIG_PROJECT | grep '^s' | wc -l | MQ_CONFIG_Trim
                            ;;

       Solaris:max-shm-ids) ipcs -mJ 2>/dev/null | grep -w $MQ_CONFIG_PROJECT | grep '^m' | wc -l | MQ_CONFIG_Trim
                            ;;

              Linux:semmni) ipcs -s 2>/dev/null | grep '^0x' | wc -l | MQ_CONFIG_Trim
                            ;;

                  *:semmni) ipcs -s 2>/dev/null | grep '^s' | wc -l | MQ_CONFIG_Trim
                            ;;

              Linux:semmns) ipcs -s 2>/dev/null | grep '^0x' | awk '{print $5}' | MQ_CONFIG_Sum
                            ;;

                  *:semmns) ipcs -sa 2>/dev/null | grep '^s' | sed 's/^./& /' |
                              awk '{print $9}' | MQ_CONFIG_Sum
                            ;;

              Linux:shmall) ipcs -u 2>/dev/null | grep 'pages allocated' | awk '{print $3}'
                            ;;

              Linux:shmmni) ipcs -m 2>/dev/null | grep '^0x' | wc -l | MQ_CONFIG_Trim
                            ;;

                  *:shmmni) ipcs -m 2>/dev/null | grep '^m' | wc -l | MQ_CONFIG_Trim
                            ;;
    esac
  }


### This function compares the current value of any parameter to the recommended
### value from IBM, and where possible it prints the current usage as well.  The
### caller may pass in a warning limit, expressed either as an absolute value or
### as a percentage of the IBM limit.  Values which meet the IBM limit pass, and
### values which are reasonably close will give a warning, while low values will
### fail the test.  When resource usage is very high, this function may score an
### otherwise valid value with a warning (75% and up) or a failure (95% and up).
### When the warning limit is greater than the IBM limit, the parameter requires
### a low setting.  Negating all the values in this function lets the same logic
### score these inverted parameters.  All calculations in this function are done
### using the 'bc' calculator since some parameters have very large values which
### overflow the arithmetic precision of the shell.  After examining each value,
### this function assigns a grade as follows:
###
###   PASS: Meets or exceeds the IBM value and current usage is less than 75%
###   WARN: Limit approaches the IBM value or current usage is between 75-95%
###   FAIL: Limit is less than the IBM value or its current usage exceeds 95%
###

  MQ_CONFIG_DisplayLimit() {
    MQ_CONFIG_PARAM=$1
    MQ_CONFIG_UNITS=$2
    MQ_CONFIG_LIMIT=$3
    MQ_CONFIG_ALERT=$4
    MQ_CONFIG_VALUE=$5

    MQ_CONFIG_CURRENT=`MQ_CONFIG_GetResourceUsage $MQ_CONFIG_PARAM`
    if [ -z "$MQ_CONFIG_LIMIT" ]; then
      return
    elif [ -z "$MQ_CONFIG_VALUE" ]; then
      return
    elif [ "$MQ_CONFIG_UNITS" = "$MQ_CONFIG_LITERAL" ]; then
      printf "  %-19s %-34s %-17s %b\n" "$MQ_CONFIG_PARAM" "$MQ_CONFIG_VALUE" "IBM:$MQ_CONFIG_LIMIT" "$MQ_CONFIG_ALERT"
      case "$MQ_CONFIG_ALERT" in
        "$MQ_CONFIG_WARN") MQ_CONFIG_WARNINGS=`expr $MQ_CONFIG_WARNINGS + 1`
                           ;;

        "$MQ_CONFIG_FAIL") MQ_CONFIG_FAILURES=`expr $MQ_CONFIG_FAILURES + 1`
                           ;;
      esac
      return
    elif [ "$MQ_CONFIG_LIMIT" = "$MQ_CONFIG_AUTO" ]; then
      printf "  %-19s %-34s %-17s %b\n" "$MQ_CONFIG_PARAM" "${MQ_CONFIG_CURRENT:=$MQ_CONFIG_UNKNOWN} $MQ_CONFIG_UNITS" "[Auto Tuned]" "$MQ_CONFIG_PASS"
      return
    elif [ -n "$MQ_CONFIG_CURRENT" -a "$MQ_CONFIG_VALUE" != "$MQ_CONFIG_UNKNOWN" -a "$MQ_CONFIG_VALUE" != "$MQ_CONFIG_UNLIMITED" ]; then
      if [ $MQ_CONFIG_VALUE != 0 ]; then
        MQ_CONFIG_PERCENT=`printf "$MQ_CONFIG_CURRENT * 100 / $MQ_CONFIG_VALUE\n" | bc 2>/dev/null`
        printf "  %-19s %-26s %-7s " "$MQ_CONFIG_PARAM" "$MQ_CONFIG_CURRENT of $MQ_CONFIG_VALUE $MQ_CONFIG_UNITS" "(${MQ_CONFIG_PERCENT}%)"
      else
        printf "  %-19s %-34s " "$MQ_CONFIG_PARAM" "$MQ_CONFIG_CURRENT of $MQ_CONFIG_UNKNOWN $MQ_CONFIG_UNITS"
      fi
    else
      MQ_CONFIG_PERCENT=0
      printf "  %-19s %-34s " "$MQ_CONFIG_PARAM" "$MQ_CONFIG_VALUE $MQ_CONFIG_UNITS"
    fi

    case ${MQ_CONFIG_ALERT:=$MQ_CONFIG_LIMIT} in
      *%) MQ_CONFIG_ALERT=`printf "%s" "$MQ_CONFIG_ALERT" | env LANG=C tr -d %`
          MQ_CONFIG_ALERT=`printf "$MQ_CONFIG_LIMIT * $MQ_CONFIG_ALERT / 100\n" | env LANG=C tr -d % | bc 2>/dev/null`
          ;;
    esac

    if [ "$MQ_CONFIG_LIMIT" != "$MQ_CONFIG_UNLIMITED" -a -n "`printf \"if ($MQ_CONFIG_ALERT > $MQ_CONFIG_LIMIT) 1\n\" | bc 2>/dev/null`" ]; then
      if [ $MQ_CONFIG_LIMIT -eq 1 ]; then
        printf "%-17s " "IBM=$MQ_CONFIG_LIMIT"
      else
        printf "%-17s " "IBM<=$MQ_CONFIG_LIMIT"
      fi

      MQ_CONFIG_LIMIT=-$MQ_CONFIG_LIMIT; MQ_CONFIG_ALERT=-$MQ_CONFIG_ALERT; MQ_CONFIG_VALUE=-$MQ_CONFIG_VALUE
    else
      printf "%-17s " "IBM>=$MQ_CONFIG_LIMIT"
    fi

    if [ "$MQ_CONFIG_VALUE" = "$MQ_CONFIG_UNLIMITED" ]; then
      printf "%b\n" "$MQ_CONFIG_PASS"
    elif [ "$MQ_CONFIG_VALUE" = "$MQ_CONFIG_UNKNOWN" -o "$MQ_CONFIG_LIMIT" = "$MQ_CONFIG_UNLIMITED" ]; then
      MQ_CONFIG_WARNINGS=`expr $MQ_CONFIG_WARNINGS + 1`
      printf "%b\n" "$MQ_CONFIG_WARN"
    elif [ -n "`printf \"if ($MQ_CONFIG_VALUE < $MQ_CONFIG_ALERT) 1\n\" | bc 2>/dev/null`" -o $MQ_CONFIG_PERCENT -gt 95 ]; then
      MQ_CONFIG_FAILURES=`expr $MQ_CONFIG_FAILURES + 1`
      printf "%b\n" "$MQ_CONFIG_FAIL"
    elif [ -n "`printf \"if ($MQ_CONFIG_VALUE >= $MQ_CONFIG_LIMIT) 1\n\" | bc 2>/dev/null`" -a $MQ_CONFIG_PERCENT -lt 75 ]; then
      printf "%b\n" "$MQ_CONFIG_PASS"
    else
      MQ_CONFIG_WARNINGS=`expr $MQ_CONFIG_WARNINGS + 1`
      printf "%b\n" $MQ_CONFIG_WARN
    fi

    return
  }


### Shells which support the bgnice (or nobgnice) option can cause a performance
### problem when MQ commands are started in the background (e.g. 'runmqlsr -m QM
### -t tcp -p 1414 1>/dev/null 2>&1 &').  Defining and starting such commands as
### LISTENER and SERVICE objects in the queue manager can avoid this problem for
### MQ administrators, but another option is to disable the shell bgnice feature
### before starting MQ.  This function does a best-effort check when mqconfig is
### started normally, but when mqconfig is sourced it reliably reports the state
### of the bgnice (or nobgnice) shell option.

  MQ_CONFIG_CheckShellOptions() {
    printf "\nShell Default Options (%s)\n" "`id -un 2>/dev/null`"

    if [ -n "$MQ_CONFIG_SOURCED" ]; then
      if set -o 2>/dev/null | grep -q "nobgnice.*off"; then
        MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "nobgnice:on"  "$MQ_CONFIG_FAIL" "nobgnice:off"
      elif set -o 2>/dev/null | grep -q "nobgnice.*on"; then
        MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "nobgnice:on"  "$MQ_CONFIG_PASS" "nobgnice:on"
      elif set -o 2>/dev/null | grep -q "bgnice.*off"; then
        MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "bgnice:off"   "$MQ_CONFIG_PASS" "bgnice:off"
      elif set -o 2>/dev/null | grep -q "bgnice.*on"; then
        MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "bgnice:off"   "$MQ_CONFIG_FAIL" "bgnice:on"
      else
        MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "N/A"          "$MQ_CONFIG_PASS" "No settings needed in this shell"
      fi
    else
      case `$MQ_CONFIG_SHELL -ic "set -o" 2>/dev/null | grep bgnice | awk '{print $1}'` in
        *nobgnice*) MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "nobgnice:on"  "$MQ_CONFIG_WARN" "$MQ_CONFIG_UNKNOWN"
                    printf "\n"
                    MQ_CONFIG_Error 1014 "$MQ_CONFIG_SHELL" nobgnice "$0" "$MQ_CONFIG_CMDLINE_ARGS"
                    ;;

          *bgnice*) MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "bgnice:off"   "$MQ_CONFIG_WARN" "$MQ_CONFIG_UNKNOWN"
                    printf "\n"
                    MQ_CONFIG_Error 1014 "$MQ_CONFIG_SHELL" bgnice "$0" "$MQ_CONFIG_CMDLINE_ARGS"
                    ;;

                 *) MQ_CONFIG_DisplayLimit "$MQ_CONFIG_SHELL" "$MQ_CONFIG_LITERAL" "N/A"          "$MQ_CONFIG_PASS" "No settings needed in this shell"
                    ;;
      esac
    fi
  }


### AIX is special because its kernel has no parameters for System V IPC objects
### which MQ uses.  Instead, AIX has extremely high limits built in which exceed
### anything MQ might want.  This function prints those parameter names and then
### shows they are auto-tuned by AIX before checking other system settings.  AIX
### does have some HIPER APARs which affect MQ, so this function checks that the
### appropriate fixes have been installed:
###
###   AIX V7.1 TL0: bos.mp64 7.1.0.0 - 7.1.0.1 are vulnerable
###                 bos.mp64 7.1.0.2 and later include IZ84576
###            TL1: bos.mp64 7.1.1.0 and later are not vulnerable
###
###   AIX V6.1 TL6: bos.mp64 6.1.6.0 - 6.1.6.1 are vulnerable
###                 bos.mp64 6.1.6.2 - 6.1.6.14 include IZ84729
###                 bos.mp64 6.1.6.15 and later include IZ85204
###            TL7: bos.mp64 6.1.7.0 and later are not vulerable
###

  MQ_CONFIG_AnalyzeAIX() {
    MQ_CONFIG_IBM_MAXUPROC=1024
    MQ_CONFIG_IBM_NOFILES_HARD=10240
    MQ_CONFIG_IBM_NOFILES_SOFT=10240
    MQ_CONFIG_IBM_DATA_SOFT=$MQ_CONFIG_UNLIMITED
    MQ_CONFIG_IBM_STACK_SOFT=$MQ_CONFIG_UNLIMITED

    MQ_CONFIG_ABSTRACT="Applications using user trace hooks fail when trace is enabled"

    case "`lslpp -qcL bos.mp64 | awk -F: '{print $3}'`" in
       7.1.0.[0-1]) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ84576 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_FAIL
                    ;;

           7.1.0.*) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ84576 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_PASS
                    ;;

       6.1.6.[0-1]) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ84729 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_FAIL
                    ;;

       6.1.6.[2-9]) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ84729 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_PASS
                    ;;

      6.1.6.1[0-4]) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ84729 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_PASS
                    ;;

           6.1.6.*) printf "\nOperating System HIPER APARs\n"
                    printf "  %7s: %-63s %b\n" IZ85204 "$MQ_CONFIG_ABSTRACT" $MQ_CONFIG_PASS
                    ;;
    esac

    printf "\nSystem V Semaphores\n"
    MQ_CONFIG_DisplayLimit semmni                sets                                      "$MQ_CONFIG_AUTO"  0  0
    MQ_CONFIG_DisplayLimit semmns                semaphores                                "$MQ_CONFIG_AUTO"  0  0

    printf "\nSystem V Shared Memory\n"
    MQ_CONFIG_DisplayLimit shmmni                sets                                      "$MQ_CONFIG_AUTO"  0  0

    printf "\nSystem Settings\n"
    MQ_CONFIG_DisplayLimit maxuproc              processes   "$MQ_CONFIG_IBM_MAXUPROC"       50% \
      `lsattr -El sys0 -a maxuproc 2>/dev/null | awk '{print $2}' | sed 's/$/ 0/'`

    printf "\nCurrent User Limits (%s)\n" "`id -un 2>/dev/null`"
    MQ_CONFIG_DisplayLimit "nofiles      (-Hn)"  files       "$MQ_CONFIG_IBM_NOFILES_HARD"   75% \
      `ulimit -Hn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nofiles      (-Sn)"  files       "$MQ_CONFIG_IBM_NOFILES_SOFT"   75% \
      `ulimit -Sn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "data         (-Sd)"  kbytes      "$MQ_CONFIG_IBM_DATA_SOFT"      75% \
      `ulimit -Sd 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "stack        (-Ss)"  kbytes      "$MQ_CONFIG_IBM_STACK_SOFT"     75% \
      `ulimit -Ss 2>/dev/null | sed 's/$/ 0/'`

    MQ_CONFIG_CheckShellOptions
  }



### HP-UX 11 provides the kctune command for querying and setting parameters, or
### on earlier releases, the kmtune commmand.  Use bc to normalize hex and octal
### values to decimal numbers.

  MQ_CONFIG_GetHPUXValue() {
    MQ_CONFIG_PARAM=$1
    MQ_CONFIG_VALUE=

    if [ -x /usr/sbin/kctune ]; then
      MQ_CONFIG_VALUE=`/usr/sbin/kctune $MQ_CONFIG_PARAM 2>/dev/null | grep "^$MQ_CONFIG_PARAM" |
        awk '{print $2}' | env LANG=C tr [:lower:] [:upper:]`
    elif [ -x /usr/sbin/kmtune ]; then
      MQ_CONFIG_VALUE=`/usr/sbin/kmtune -q $MQ_CONFIG_PARAM 2>/dev/null | grep "^$MQ_CONFIG_PARAM" |
        awk '{print $2}' | env LANG=C tr [:lower:] [:upper:]`
    fi

    case $MQ_CONFIG_VALUE in
      0[xX]*) printf "ibase=16; %s\n" "$MQ_CONFIG_VALUE" | sed 's/0[xX]//' | bc 2>/dev/null
              ;;

          0*) printf "ibase=8;  %s\n" "$MQ_CONFIG_VALUE" | bc 2>/dev/null
              ;;

           *) printf "%s" "${MQ_CONFIG_VALUE:=0}"
              ;;
    esac
  }


### Analyze the HP-UX kernel parameter settings.  The 'nfile' parameter does not
### apply to HP-UX 11.31 or later.

  MQ_CONFIG_AnalyzeHPUX() {
    MQ_CONFIG_IBM_SEMMNI=1024
    MQ_CONFIG_IBM_SEMMNS=16384
    MQ_CONFIG_IBM_SEMMSL=100
    MQ_CONFIG_IBM_SEMMSL_MIN=64
    MQ_CONFIG_IBM_SEMMNU=16384
    MQ_CONFIG_IBM_SEMUME=256
    MQ_CONFIG_IBM_SEMAEM=16384
    MQ_CONFIG_IBM_SEMAEM_MIN=1
    MQ_CONFIG_IBM_SEMVMX=32767
    MQ_CONFIG_IBM_SEMVMX_MIN=1
    MQ_CONFIG_IBM_SHMMNI=1024
    MQ_CONFIG_IBM_SHMSEG=1024
    MQ_CONFIG_IBM_SHMMAX=536870912
    MQ_CONFIG_IBM_SHMMAX_MIN=33554432
    MQ_CONFIG_IBM_MAXUPRC=1024
    MQ_CONFIG_IBM_MAX_THREAD_PROC=66
    MQ_CONFIG_IBM_MAXFILES=10000
    MQ_CONFIG_IBM_MAXFILES_LIM=10000
    MQ_CONFIG_IBM_NFILE=20000
    MQ_CONFIG_IBM_MAXDSIZ_MIN=1073741824
    MQ_CONFIG_IBM_MAXDSIZ64_MIN=1073741824
    MQ_CONFIG_IBM_MAXSSIZ_MIN=8388608
    MQ_CONFIG_IBM_MAXSSIZ64_MIN=8388608

    printf "\nSystem V Semaphores\n"
    MQ_CONFIG_DisplayLimit semmni           sets        "$MQ_CONFIG_IBM_SEMMNI"           75% \
      `MQ_CONFIG_GetHPUXValue semmni`
    MQ_CONFIG_DisplayLimit semmns           semaphores  "$MQ_CONFIG_IBM_SEMMNS"           75% \
      `MQ_CONFIG_GetHPUXValue semmns`
    MQ_CONFIG_DisplayLimit semmsl           semaphores  "$MQ_CONFIG_IBM_SEMMSL"           "$MQ_CONFIG_IBM_SEMMSL_MIN" \
      `MQ_CONFIG_GetHPUXValue semmsl`
    MQ_CONFIG_DisplayLimit semmnu           undos       "$MQ_CONFIG_IBM_SEMMNU"           75% \
      `MQ_CONFIG_GetHPUXValue semmnu`
    MQ_CONFIG_DisplayLimit semume           undos       "$MQ_CONFIG_IBM_SEMUME"           ""  \
      `MQ_CONFIG_GetHPUXValue semume`
    MQ_CONFIG_DisplayLimit semaem           units       "$MQ_CONFIG_IBM_SEMAEM"           "$MQ_CONFIG_IBM_SEMAEM_MIN" \
      `MQ_CONFIG_GetHPUXValue semaem`
    MQ_CONFIG_DisplayLimit semvmx           units       "$MQ_CONFIG_IBM_SEMVMX"           "$MQ_CONFIG_IBM_SEMVMX_MIN" \
      `MQ_CONFIG_GetHPUXValue semvmx`

    printf "\nSystem V Shared Memory\n"
    MQ_CONFIG_DisplayLimit shmmni           sets        "$MQ_CONFIG_IBM_SHMMNI"           75% \
      `MQ_CONFIG_GetHPUXValue shmmni`
    MQ_CONFIG_DisplayLimit shmmax           bytes       "$MQ_CONFIG_IBM_SHMMAX"           "$MQ_CONFIG_IBM_SHMMAX_MIN" \
      `MQ_CONFIG_GetHPUXValue shmmax`
    MQ_CONFIG_DisplayLimit shmseg           sets        "$MQ_CONFIG_IBM_SHMSEG"           75% \
      `MQ_CONFIG_GetHPUXValue shmseg`

    printf "\nSystem Settings\n"
    MQ_CONFIG_DisplayLimit maxuprc          processes   "$MQ_CONFIG_IBM_MAXUPRC"          50% \
      `MQ_CONFIG_GetHPUXValue maxuprc`
    MQ_CONFIG_DisplayLimit max_thread_proc  threads     "$MQ_CONFIG_IBM_MAX_THREAD_PROC"  ""  \
      `MQ_CONFIG_GetHPUXValue max_thread_proc`
    MQ_CONFIG_DisplayLimit maxdsiz          bytes       "$MQ_CONFIG_IBM_MAXDSIZ_MIN"      60% \
      `MQ_CONFIG_GetHPUXValue maxdsiz`
    MQ_CONFIG_DisplayLimit maxdsiz_64bit    bytes       "$MQ_CONFIG_IBM_MAXDSIZ64_MIN"    ""  \
      `MQ_CONFIG_GetHPUXValue maxdsiz_64bit`
    MQ_CONFIG_DisplayLimit maxssiz          bytes       "$MQ_CONFIG_IBM_MAXSSIZ_MIN"      ""  \
      `MQ_CONFIG_GetHPUXValue maxssiz`
    MQ_CONFIG_DisplayLimit maxssiz_64bit    bytes       "$MQ_CONFIG_IBM_MAXSSIZ64_MIN"    ""  \
      `MQ_CONFIG_GetHPUXValue maxssiz_64bit`
    MQ_CONFIG_DisplayLimit maxfiles         files       "$MQ_CONFIG_IBM_MAXFILES"         75% \
      `MQ_CONFIG_GetHPUXValue maxfiles`
    MQ_CONFIG_DisplayLimit maxfiles_lim     files       "$MQ_CONFIG_IBM_MAXFILES_LIM"     75% \
      `MQ_CONFIG_GetHPUXValue maxfiles_lim`

    if [ $MQ_CONFIG_OSREL -lt 31 ]; then
      MQ_CONFIG_DisplayLimit nfile          files       "$MQ_CONFIG_IBM_NFILE"            75% \
        `MQ_CONFIG_GetHPUXValue nfile`
    fi

    MQ_CONFIG_CheckShellOptions
  }


### Most Linux distributions have the sysctl program to query kernel parameters.
### If that is not available read the values directly from the /proc filesystem.
### Some values may contain several fields, which the caller must dissect.

  MQ_CONFIG_GetLinuxValue() {
    MQ_CONFIG_PARAM=$1
    MQ_CONFIG_PROCPATH=$2
    MQ_CONFIG_VALUE=

    if [ -x /sbin/sysctl ]; then
      MQ_CONFIG_VALUE="`/sbin/sysctl -n $MQ_CONFIG_PARAM 2>/dev/null`"
    fi

    if [ -z "$MQ_CONFIG_VALUE" -a -n "$MQ_CONFIG_PROCPATH" ]; then
      MQ_CONFIG_PROC=`mount -t proc 2>/dev/null | awk '{print $3}'`
      if [ -n "$MQ_CONFIG_PROC" -a -r "$MQ_CONFIG_PROC/$MQ_CONFIG_PROCPATH" ]; then
        MQ_CONFIG_VALUE=`cat "$MQ_CONFIG_PROC/$MQ_CONFIG_PROCPATH"`
      fi
    fi

    printf "${MQ_CONFIG_VALUE:=0}"
  }


### Analyze the Linux kernel.  Although some MQ documentation included 'msgmni',
### that parameter is not used by MQ and is no longer checked here.  Because the
### shmall value is given in units of pages, we first check the system PAGE_SIZE
### before determining the IBM recommended value (2097152 in 4K pages).

  MQ_CONFIG_AnalyzeLinux() {
    MQ_CONFIG_IBM_SEMMSL=500
    MQ_CONFIG_IBM_SEMMNS=256000
    MQ_CONFIG_IBM_SEMOPM=250
    MQ_CONFIG_IBM_SEMMNI=1024
    MQ_CONFIG_IBM_SHMMNI=4096
    MQ_CONFIG_PAGE_SIZE=`getconf PAGE_SIZE 2>/dev/null`
    MQ_CONFIG_IBM_SHMALL=`printf "8589934592 / %s\n" "${MQ_CONFIG_PAGE_SIZE:=4096}" | bc 2>/dev/null`
    MQ_CONFIG_IBM_SHMMAX=268435456
    MQ_CONFIG_IBM_SHMMAX_MIN=33554432
    MQ_CONFIG_IBM_FILEMAX=524288
    MQ_CONFIG_IBM_NOFILE_HARD=10240
    MQ_CONFIG_IBM_NOFILE_SOFT=10240
    MQ_CONFIG_IBM_NPROC_HARD=4096
    MQ_CONFIG_IBM_NPROC_SOFT=4096

    printf "\nSystem V Semaphores\n"
    MQ_CONFIG_DisplayLimit "semmsl     (sem:1)"  semaphores  "$MQ_CONFIG_IBM_SEMMSL"       ""  \
      `MQ_CONFIG_GetLinuxValue kernel.sem sys/kernel/sem | awk '{print $1}' | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "semmns     (sem:2)"  semaphores  "$MQ_CONFIG_IBM_SEMMNS"       75% \
      `MQ_CONFIG_GetLinuxValue kernel.sem sys/kernel/sem | awk '{print $2}' | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "semopm     (sem:3)"  operations  "$MQ_CONFIG_IBM_SEMOPM"       ""  \
      `MQ_CONFIG_GetLinuxValue kernel.sem sys/kernel/sem | awk '{print $3}' | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "semmni     (sem:4)"  sets        "$MQ_CONFIG_IBM_SEMMNI"       75% \
      `MQ_CONFIG_GetLinuxValue kernel.sem sys/kernel/sem | awk '{print $4}' | sed 's/$/ 0/'`

    printf "\nSystem V Shared Memory\n"
    MQ_CONFIG_DisplayLimit shmmax                bytes       "$MQ_CONFIG_IBM_SHMMAX"       "$MQ_CONFIG_IBM_SHMMAX_MIN" \
      `MQ_CONFIG_GetLinuxValue kernel.shmmax sys/kernel/shmmax`
    MQ_CONFIG_DisplayLimit shmmni                sets        "$MQ_CONFIG_IBM_SHMMNI"       75% \
      `MQ_CONFIG_GetLinuxValue kernel.shmmni sys/kernel/shmmni`
    MQ_CONFIG_DisplayLimit shmall                pages       "$MQ_CONFIG_IBM_SHMALL"       50% \
      `MQ_CONFIG_GetLinuxValue kernel.shmall sys/kernel/shmall`

    printf "\nSystem Settings\n"
    MQ_CONFIG_DisplayLimit file-max              files       "$MQ_CONFIG_IBM_FILEMAX"      75% \
      `MQ_CONFIG_GetLinuxValue fs.file-max sys/fs/file-max`

    printf "\nCurrent User Limits (%s)\n" "`id -un 2>/dev/null`"
    MQ_CONFIG_DisplayLimit "nofile       (-Hn)"  files       "$MQ_CONFIG_IBM_NOFILE_HARD"  75% \
      `ulimit -Hn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nofile       (-Sn)"  files       "$MQ_CONFIG_IBM_NOFILE_SOFT"  75% \
      `ulimit -Sn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nproc        (-Hu)"  processes   "$MQ_CONFIG_IBM_NPROC_HARD"   75% \
      `ulimit -Hu 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nproc        (-Su)"  processes   "$MQ_CONFIG_IBM_NPROC_SOFT"   75% \
      `ulimit -Su 2>/dev/null | sed 's/$/ 0/'`

    MQ_CONFIG_CheckShellOptions
  }


### OS X provides the sysctl program to query kernel parameters.

  MQ_CONFIG_GetOSXValue() {
    MQ_CONFIG_PARAM=$1

    MQ_CONFIG_VALUE="`/usr/sbin/sysctl -n $MQ_CONFIG_PARAM 2>/dev/null`"
    printf "${MQ_CONFIG_VALUE:=0}"
  }


### Analyze the OS X kernel, e.g. for MQ Light.  There are no MQ recommendations
### for OS X, so we use published recommendations for Linux, HP-UX and Solaris.

  MQ_CONFIG_AnalyzeOSX() {
    MQ_CONFIG_IBM_SEMMNI=1024
    MQ_CONFIG_IBM_SEMMNS=16384
    MQ_CONFIG_IBM_SEMMNU=16384
    MQ_CONFIG_IBM_SEMMSL=100
    MQ_CONFIG_IBM_SEMMSL_MIN=64
    MQ_CONFIG_IBM_SEMUME=256
    MQ_CONFIG_IBM_SHMMAX=536870912
    MQ_CONFIG_IBM_SHMMAX_MIN=33554432
    MQ_CONFIG_IBM_SHMMNI=1024
    MQ_CONFIG_IBM_SHMMIN=1
    MQ_CONFIG_IBM_SHMMIN_MAX=4096
    MQ_CONFIG_IBM_SHMSEG=1024
    MQ_CONFIG_IBM_SHMALL=2097152
    MQ_CONFIG_IBM_SHMMAX=268435456
    MQ_CONFIG_IBM_SHMMAX_MIN=33554432
    MQ_CONFIG_IBM_MAXUPRC=1024
    MQ_CONFIG_IBM_FILEMAX=524288
    MQ_CONFIG_IBM_NOFILE_HARD=10240
    MQ_CONFIG_IBM_NOFILE_SOFT=10240
    MQ_CONFIG_IBM_NPROC_HARD=4096
    MQ_CONFIG_IBM_NPROC_SOFT=4096

    printf "\nSystem V Semaphores\n"
    MQ_CONFIG_DisplayLimit semmni           sets        "$MQ_CONFIG_IBM_SEMMNI"           75% \
      `MQ_CONFIG_GetOSXValue kern.sysv.semmni`
    MQ_CONFIG_DisplayLimit semmns           semaphores  "$MQ_CONFIG_IBM_SEMMNS"           75% \
      `MQ_CONFIG_GetOSXValue kern.sysv.semmns`
    MQ_CONFIG_DisplayLimit semmsl           semaphores  "$MQ_CONFIG_IBM_SEMMSL"           "$MQ_CONFIG_IBM_SEMMSL_MIN" \
      `MQ_CONFIG_GetOSXValue kern.sysv.semmsl`
    MQ_CONFIG_DisplayLimit semmnu           undos       "$MQ_CONFIG_IBM_SEMMNU"           75% \
      `MQ_CONFIG_GetOSXValue kern.sysv.semmnu`
    MQ_CONFIG_DisplayLimit semume           undos       "$MQ_CONFIG_IBM_SEMUME"           ""  \
      `MQ_CONFIG_GetOSXValue kern.sysv.semume`

    printf "\nSystem V Shared Memory\n"
    MQ_CONFIG_DisplayLimit shmmni           sets        "$MQ_CONFIG_IBM_SHMMNI"           75% \
      `MQ_CONFIG_GetOSXValue kern.sysv.shmmni`
    MQ_CONFIG_DisplayLimit shmmax           bytes       "$MQ_CONFIG_IBM_SHMMAX"           "$MQ_CONFIG_IBM_SHMMAX_MIN" \
      `MQ_CONFIG_GetOSXValue kern.sysv.shmmax`
    MQ_CONFIG_DisplayLimit shmmin           bytes       "$MQ_CONFIG_IBM_SHMMIN"           "$MQ_CONFIG_IBM_SHMMIN_MAX" \
      `MQ_CONFIG_GetOSXValue kern.sysv.shmmin`
    MQ_CONFIG_DisplayLimit shmseg           sets        "$MQ_CONFIG_IBM_SHMSEG"           75% \
      `MQ_CONFIG_GetOSXValue kern.sysv.shmseg`
    MQ_CONFIG_DisplayLimit shmall           pages       "$MQ_CONFIG_IBM_SHMALL"           50% \
      `MQ_CONFIG_GetOSXValue kern.sysv.shmall`

    printf "\nSystem Settings\n"
    MQ_CONFIG_DisplayLimit maxprocperuid    files       "$MQ_CONFIG_IBM_MAXUPRC"          75% \
      `MQ_CONFIG_GetOSXValue kern.maxprocperuid`
    MQ_CONFIG_DisplayLimit maxfiles         files       "$MQ_CONFIG_IBM_FILEMAX"          75% \
      `MQ_CONFIG_GetOSXValue kern.maxfiles`
    MQ_CONFIG_DisplayLimit maxfilesperproc  files       "$MQ_CONFIG_IBM_NOFILE_HARD"      75% \
      `MQ_CONFIG_GetOSXValue kern.maxfilesperproc`

    printf "\nCurrent User Limits (%s)\n" "`id -un 2>/dev/null`"
    MQ_CONFIG_DisplayLimit "nofile       (-Hn)"  files       "$MQ_CONFIG_IBM_NOFILE_HARD"  75% \
      `ulimit -Hn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nofile       (-Sn)"  files       "$MQ_CONFIG_IBM_NOFILE_SOFT"  75% \
      `ulimit -Sn 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nproc        (-Hu)"  processes   "$MQ_CONFIG_IBM_NPROC_HARD"   75% \
      `ulimit -Hu 2>/dev/null | sed 's/$/ 0/'`
    MQ_CONFIG_DisplayLimit "nproc        (-Su)"  processes   "$MQ_CONFIG_IBM_NPROC_SOFT"   75% \
      `ulimit -Su 2>/dev/null | sed 's/$/ 0/'`

    MQ_CONFIG_CheckShellOptions
  }


### Determine the value of a Solaris 9 parameter using saved output from sysdef,
### for performance reasons.

  MQ_CONFIG_GetSolarisV9Value() {
    MQ_CONFIG_PARAM=$1
    MQ_CONFIG_VALUE="`printf \"%s\" \"$MQ_CONFIG_SYSDEF_OUTPUT\" | grep \"($MQ_CONFIG_PARAM)\" | awk '{print $1}'`"
    printf "${MQ_CONFIG_VALUE:=0}"
  }


### Analyze Solaris 9 settings.  MQ 7.1 and later no longer support Solaris 9.

  MQ_CONFIG_AnalyzeSolarisV9() {
    MQ_CONFIG_IBM_SEMMNI=1024
    MQ_CONFIG_IBM_SEMMNS=16384
    MQ_CONFIG_IBM_SEMMSL=100
    MQ_CONFIG_IBM_SEMMSL_MIN=64
    MQ_CONFIG_IBM_SEMMNU=16384
    MQ_CONFIG_IBM_SEMUME=256
    MQ_CONFIG_IBM_SEMAEM=16384
    MQ_CONFIG_IBM_SEMAEM_MIN=1
    MQ_CONFIG_IBM_SEMVMX=32767
    MQ_CONFIG_IBM_SEMVMX_MIN=1
    MQ_CONFIG_IBM_SEMOPM=100
    MQ_CONFIG_IBM_SEMOPM_MIN=5
    MQ_CONFIG_IBM_SEMMAP=`expr $MQ_CONFIG_IBM_SEMMNI + 2`
    MQ_CONFIG_IBM_SHMMNI=1024
    MQ_CONFIG_IBM_SHMSEG=1024
    MQ_CONFIG_IBM_SHMMAX=4294967295
    MQ_CONFIG_IBM_SHMMAX_MIN=33554432
    MQ_CONFIG_IBM_SHMMIN=1
    MQ_CONFIG_IBM_SHMMIN_MAX=4096
    MQ_CONFIG_IBM_MAXUPRC=1024
    MQ_CONFIG_IBM_FD_CUR=10000
    MQ_CONFIG_IBM_FD_MAX=10000

    MQ_CONFIG_SYSDEF_OUTPUT=`/usr/sbin/sysdef -i 2>/dev/null`

    printf "\nSystem V Semaphores\n"
    MQ_CONFIG_DisplayLimit semmni                sets         "$MQ_CONFIG_IBM_SEMMNI"  75% \
      `MQ_CONFIG_GetSolarisV9Value semmni`
    MQ_CONFIG_DisplayLimit semmns                semaphores   "$MQ_CONFIG_IBM_SEMMNS"  75% \
      `MQ_CONFIG_GetSolarisV9Value semmns`
    MQ_CONFIG_DisplayLimit semmsl                semaphores   "$MQ_CONFIG_IBM_SEMMSL"  "$MQ_CONFIG_IBM_SEMMSL_MIN" \
      `MQ_CONFIG_GetSolarisV9Value semmsl`
    MQ_CONFIG_DisplayLimit semmnu                undos        "$MQ_CONFIG_IBM_SEMMNU"  75% \
      `MQ_CONFIG_GetSolarisV9Value semmnu`
    MQ_CONFIG_DisplayLimit semume                undos        "$MQ_CONFIG_IBM_SEMUME"  ""  \
      `MQ_CONFIG_GetSolarisV9Value semume`
    MQ_CONFIG_DisplayLimit semaem                units        "$MQ_CONFIG_IBM_SEMAEM"  "$MQ_CONFIG_IBM_SEMAEM_MIN" \
      `MQ_CONFIG_GetSolarisV9Value semaem`
    MQ_CONFIG_DisplayLimit semvmx                units        "$MQ_CONFIG_IBM_SEMVMX"  "$MQ_CONFIG_IBM_SEMVMX_MIN" \
      `MQ_CONFIG_GetSolarisV9Value semvmx`
    MQ_CONFIG_DisplayLimit semopm                operations   "$MQ_CONFIG_IBM_SEMOPM"  "$MQ_CONFIG_IBM_SEMOPM_MIN" \
      `MQ_CONFIG_GetSolarisV9Value semopm`

    printf "\nSystem V Shared Memory\n"
    MQ_CONFIG_DisplayLimit shmmni                sets         "$MQ_CONFIG_IBM_SHMMNI"  75% \
      `MQ_CONFIG_GetSolarisV9Value shmmni`
    MQ_CONFIG_DisplayLimit shmmax                bytes        "$MQ_CONFIG_IBM_SHMMAX"  "$MQ_CONFIG_IBM_SHMMAX_MIN" \
      `MQ_CONFIG_GetSolarisV9Value shmmax`
    MQ_CONFIG_DisplayLimit shmseg                sets         "$MQ_CONFIG_IBM_SHMSEG"  ""  \
      `MQ_CONFIG_GetSolarisV9Value shmseg`
    MQ_CONFIG_DisplayLimit shmmin                bytes        "$MQ_CONFIG_IBM_SHMMIN"  "$MQ_CONFIG_IBM_SHMMIN_MAX" \
      `MQ_CONFIG_GetSolarisV9Value shmmin`

    printf "\nSystem Settings\n"
    MQ_CONFIG_DisplayLimit maxuprc               processes    "$MQ_CONFIG_IBM_MAXUPRC" 50% \
      `MQ_CONFIG_GetSolarisV9Value v.v_maxup`

    printf "\nCurrent User Limits (%s)\n" "`id -un 2>/dev/null`"
    MQ_CONFIG_DisplayLimit "rlim_fd_max  (-Hn)"  descriptors  "$MQ_CONFIG_IBM_FD_MAX"  75% \
      `ulimit -Hn 2>/dev/null | sed 's/$/ 1024/'`
    MQ_CONFIG_DisplayLimit "rlim_fd_cur  (-Sn)"  descriptors  "$MQ_CONFIG_IBM_FD_CUR"  75% \
      `ulimit -Sn 2>/dev/null | sed 's/$/ 256/'`

    MQ_CONFIG_CheckShellOptions
  }


### Solaris 10 and later manages resource limits using projects.  The prctl tool
### can't show limits of projects which are defined but not in use.  To be safe,
### we use the projects command to query settings and fill in default values for
### any limit which is not explicitly set.

  MQ_CONFIG_GetSolarisValue() {
    MQ_CONFIG_PARAM=$1

    MQ_CONFIG_VALUE=`projects -l "$MQ_CONFIG_PROJECT" | grep "${MQ_CONFIG_PARAM}=" | sed 's/^.*=//' |
           env LANG=C tr ',' ' ' | awk '{print $2}'`

    if [ -z "$MQ_CONFIG_VALUE" ]; then
      case $MQ_CONFIG_PARAM in
        process.max-file-descriptor) MQ_CONFIG_VALUE=256
                                     ;;

                project.max-shm-ids) MQ_CONFIG_VALUE=128
                                     ;;

             project.max-shm-memory) MQ_CONFIG_VALUE=`/usr/sbin/prtconf |
                                       grep '^Memory size:' |
                                       sed -e 's/Megabytes/\* 1048576/' \
                                           -e 's/Gigabytes/\* 1073741824/' \
                                           -e 's/Terabytes/\* 1099511627776/' \
                                           -e 's/.*://' -e 's/$/ \/ 4/' | bc 2>/dev/null`
                                     ;;

                project.max-sem-ids) MQ_CONFIG_VALUE=128
                                     ;;
      esac
    fi

    printf "${MQ_CONFIG_VALUE:=0}"
  }


### Analyze Solaris projects identified by the user.  If the user did not name a
### project, analyze any projects in which the MQ queue manager processes called
### amqzxma0 or amqzmgr0 are found (the execution controller and service control
### manager processes).  Analyze the recommended group.mqm project as well if it
### exists.  Issue warnings for any queue managers running outside the group.mqm
### project and when no group.mqm project is defined.  When all else fails, just
### analyze the current project.

  MQ_CONFIG_AnalyzeSolaris() {
    if [ -z "$MQ_CONFIG_PROJLIST" ]; then
      MQ_CONFIG_PROJLIST=`ps -eo project,args | egrep '[a]mqzxma0|[a]mqzmgr0' |
                awk '{print $1}' | uniq | grep -vw group\.mqm | tr '\n' ' '`
      MQ_CONFIG_COMMALIST="(`printf \"%s\n\" \"$MQ_CONFIG_PROJLIST\" | MQ_CONFIG_Trim | sed 's/ /, /g'`)"
      printf "\n"

      if projects -l group.mqm 1>/dev/null 2>&1; then
        if [ -n "$MQ_CONFIG_PROJLIST" ]; then
          MQ_CONFIG_Message 1008 "$MQ_CONFIG_COMMALIST"
          MQ_CONFIG_Message 1007 "group.mqm and other projects with queue manager activity $MQ_CONFIG_COMMALIST"
          MQ_CONFIG_PROJLIST="group.mqm $MQ_CONFIG_PROJLIST"
        else
          MQ_CONFIG_Message 1007 "the group.mqm project"
          MQ_CONFIG_PROJLIST="group.mqm"
        fi
      else
        MQ_CONFIG_Message 1009

        if [ -n "$MQ_CONFIG_PROJLIST" ]; then
          MQ_CONFIG_Message 1007 "all projects with queue manager activity $MQ_CONFIG_COMMALIST"
        else
          MQ_CONFIG_PROJLIST=`id -p | sed -e 's/^.*projid=.*(//' -e 's/).*//'`
          if [ -n "$MQ_CONFIG_PROJLIST" ]; then
            MQ_CONFIG_Message 1007 "the current project"
          else
            MQ_CONFIG_PROJLIST=default
            MQ_CONFIG_Message 1007 "the default project"
          fi
        fi
      fi
    fi


    MQ_CONFIG_IBM_SEMMNI=1024
    MQ_CONFIG_IBM_SHMMNI=1024
    MQ_CONFIG_IBM_SHMMAX=4294967296
    MQ_CONFIG_IBM_SHMMAX_MIN=4294967295
    MQ_CONFIG_IBM_MAXFDS=10000

    for MQ_CONFIG_PROJECT in $MQ_CONFIG_PROJLIST; do
      MQ_CONFIG_PROJID=`projects -l "$MQ_CONFIG_PROJECT" 2>/dev/null | grep projid | sed 's/.*: *//'`
      if [ -z "$MQ_CONFIG_PROJID" ]; then
        MQ_CONFIG_Error 1006 $MQ_CONFIG_PROJECT
        continue
      fi

      printf "\nProject %s (%s): System V Semaphores\n" "$MQ_CONFIG_PROJECT" "$MQ_CONFIG_PROJID"
      MQ_CONFIG_DisplayLimit max-sem-ids          sets         "$MQ_CONFIG_IBM_SEMMNI"  75% \
        `MQ_CONFIG_GetSolarisValue project.max-sem-ids`

      printf "\nProject %s (%s): System V Shared Memory\n" "$MQ_CONFIG_PROJECT" "$MQ_CONFIG_PROJID"
      MQ_CONFIG_DisplayLimit max-shm-ids          sets         "$MQ_CONFIG_IBM_SHMMNI"  75% \
        `MQ_CONFIG_GetSolarisValue project.max-shm-ids`
      MQ_CONFIG_DisplayLimit max-shm-memory       bytes        "$MQ_CONFIG_IBM_SHMMAX"  "$MQ_CONFIG_IBM_SHMMAX_MIN" \
        `MQ_CONFIG_GetSolarisValue project.max-shm-memory`

      printf "\nProject %s (%s): Other Settings\n" "$MQ_CONFIG_PROJECT" "$MQ_CONFIG_PROJID"
      MQ_CONFIG_DisplayLimit max-file-descriptor  descriptors  "$MQ_CONFIG_IBM_MAXFDS"  75% \
        `MQ_CONFIG_GetSolarisValue process.max-file-descriptor`
      printf "\n"
    done

    MQ_CONFIG_CheckShellOptions
  }


### Initialize variables used by the mqconfig script.

  unset MQ_CONFIG_OPT MQ_CONFIG_MQVER MQ_CONFIG_PROJLIST
  unset MQ_CONFIG_OSVER MQ_CONFIG_OPSYS MQ_CONFIG_ARCH
  unset MQ_CONFIG_CMDLINE MQ_RETVAL

  MQ_CONFIG_PS_THREAD_FLAG=
  MQ_CONFIG_WARNINGS=0
  MQ_CONFIG_FAILURES=0

  if [ -t 1 ]; then
    MQ_CONFIG_PASS="\033[32mPASS\033[m"
    MQ_CONFIG_WARN="\033[33mWARN\033[m"
    MQ_CONFIG_FAIL="\033[31mFAIL\033[m"
  else
    MQ_CONFIG_PASS=PASS
    MQ_CONFIG_WARN=WARN
    MQ_CONFIG_FAIL=FAIL
  fi

  MQ_CONFIG_UNLIMITED=unlimited
  MQ_CONFIG_LITERAL=literal
  MQ_CONFIG_UNKNOWN=???
  MQ_CONFIG_AUTO=auto

  MQ_CONFIG_OPSYS=`uname -s`
  MQ_CONFIG_HOSTNAME=`hostname 2>/dev/null | sed 's/\..*//'`

  case "$MQ_CONFIG_OPSYS" in
    Darwin) MQ_CONFIG_OPSYS=OSX
            ;;

     HP-UX) MQ_CONFIG_OPSYS=HPUX
            ;;

     Linux) MQ_CONFIG_PS_THREAD_FLAG=L
            ;;

     SunOS) case `uname -r` in
              5.9) MQ_CONFIG_OPSYS=SolarisV9
                   ;;

                *) MQ_CONFIG_OPSYS=Solaris
                   ;;
            esac
            ;;
  esac


### Parse the command line arguments for the mqconfig script, or when the script
### is sourced, check the MQ_CONFIG_OPTIONS variable for arguments.  Because the
### shell getopts builtin only operates on command-line arguments, we must parse
### the two sources of command line arguments manually.  Sourced scripts may not
### exit, so use the MQ_RETVAL variable to indicate when to finish.

  if [ -n "$MQ_CONFIG_SOURCED" ]; then
    if [ -n "${MQ_CONFIG_OPTIONS+X}" ]; then
      MQ_CONFIG_Message 1017 MQ_CONFIG_OPTIONS "$MQ_CONFIG_OPTIONS"
    else
      MQ_CONFIG_Message 1017 "the command line" "$MQ_CONFIG_CMDLINE_ARGS"
      MQ_CONFIG_OPTIONS=$@
      MQ_CONFIG_CMDLINE=1
    fi
  else
    MQ_CONFIG_Message 1017 "the command line" "$MQ_CONFIG_CMDLINE_ARGS"
    MQ_CONFIG_OPTIONS=$@
  fi

  for MQ_CONFIG_ARG in $MQ_CONFIG_OPTIONS; do
    if [ -z "${MQ_RETVAL+X}" ]; then
      case "$MQ_CONFIG_ARG" in
        -*) if [ -n "${MQ_CONFIG_OPT+X}" ]; then
              MQ_CONFIG_Error 1000 "$MQ_CONFIG_OPT"
              MQ_CONFIG_PrintSyntax && MQ_RETVAL=1
            elif [ "$MQ_CONFIG_ARG" = "-?" ]; then
              MQ_CONFIG_PrintHelp && MQ_RETVAL=0
            elif [ "$MQ_CONFIG_ARG" = "-p" ]; then
              if [ "$MQ_CONFIG_OPSYS" != Solaris ]; then
                MQ_CONFIG_Error 1001 "$MQ_CONFIG_ARG"
                MQ_CONFIG_PrintSyntax && MQ_RETVAL=1
              else
                MQ_CONFIG_OPT="$MQ_CONFIG_ARG"
              fi
            elif [ "$MQ_CONFIG_ARG" = "-v" ]; then
              MQ_CONFIG_OPT="$MQ_CONFIG_ARG"
            else
              MQ_CONFIG_Error 1001 "$MQ_CONFIG_ARG"
              MQ_CONFIG_PrintSyntax && MQ_RETVAL=1
            fi
            ;;

         *) case "${MQ_CONFIG_OPT-?}" in
              -p) if [ "${MQ_CONFIG_PROJLIST:=$MQ_CONFIG_ARG}" != "$MQ_CONFIG_ARG" ]; then
                    MQ_CONFIG_PROJLIST="$MQ_CONFIG_PROJLIST $MQ_CONFIG_ARG"
                  fi
                  ;;
          
              -v) MQ_CONFIG_ARG="${MQ_CONFIG_ARG##[vV]}"

                  if [ "${MQ_CONFIG_MQVER:=$MQ_CONFIG_ARG}" != "$MQ_CONFIG_ARG" ]; then
                    MQ_CONFIG_PrintSyntax && MQ_RETVAL=1
                  fi
                  ;;

               *) MQ_CONFIG_Error 1004 "$MQ_CONFIG_ARG"
                  MQ_CONFIG_PrintSyntax && MQ_RETVAL=1
                  ;;
            esac

            unset MQ_CONFIG_OPT
            ;;
      esac
    fi
  done

  if [ -n "${MQ_CONFIG_OPT+X}" ]; then
    MQ_CONFIG_Error 1000 "$MQ_CONFIG_OPT" && MQ_RETVAL=1
  fi

  if [ -n "${MQ_CONFIG_CMDLINE+X}" -a -n "$MQ_RETVAL" ]; then
    printf "\n"
    MQ_CONFIG_Error 1018 "$MQ_CONFIG_CMDLINE_ARGS"
  fi


### If the user provided a version, normalize and validate it.

  if [ -z "${MQ_RETVAL+X}" ]; then
    case "${MQ_CONFIG_MQVER:=Any}" in
      8|80*|8.0*) MQ_CONFIG_MQVER=8.0
                  ;;

        75*|7.5*) MQ_CONFIG_MQVER=7.5
                  ;;

        71*|7.1*) MQ_CONFIG_MQVER=7.1
                  ;;

      7|70*|7.0*) MQ_CONFIG_MQVER=7.0
                  ;;

      6|60*|6.0*) MQ_CONFIG_Error 1011 6.0 && MQ_RETVAL=1
                  ;;

        53*|5.3*) MQ_CONFIG_Error 1011 5.3 && MQ_RETVAL=1
                  ;;

        52*|5.2*) MQ_CONFIG_Error 1003 5.2 && MQ_RETVAL=1
                  ;;

        51*|5.1*) MQ_CONFIG_Error 1003 5.1 && MQ_RETVAL=1
                  ;;

      5|50*|5.0*) MQ_CONFIG_Error 1003 5.0 && MQ_RETVAL=1
                  ;;

              2*) MQ_CONFIG_Error 1003 2 && MQ_RETVAL=1
                  ;;

              1*) MQ_CONFIG_Error 1003 1 && MQ_RETVAL=1
                  ;;

               *) MQ_CONFIG_MQVER=Any
                  ;;
    esac
  fi


### Determine the operating system name, version, release and other details.  If
### the user provided an MQ version, check for any issues which would prevent MQ
### from running on the current system.

  if [ -z "${MQ_RETVAL+X}" ]; then
    case `uname -s` in
         AIX) MQ_CONFIG_OSVER=`uname -v`
              MQ_CONFIG_OSREL=`uname -r`
              MQ_CONFIG_ARCH=`uname -p`
              MQ_CONFIG_TL=`lslpp -qcL bos.mp64 | awk -F: '{print $3}' | awk -F. '{print $3}'`

              MQ_CONFIG_Message 1005 "AIX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL TL$MQ_CONFIG_TL ($MQ_CONFIG_ARCH)" "$MQ_CONFIG_HOSTNAME"

              if [ $MQ_CONFIG_MQVER != Any ]; then
                case $MQ_CONFIG_MQVER:$MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL in
                      8.0:7.1) if [ $MQ_CONFIG_TL -lt 2 ]; then
                                 MQ_CONFIG_Error 1013 $MQ_CONFIG_MQVER 7.1 2 && MQ_RETVAL=1
                               fi
                               ;;

                      8.0:6.1) if [ $MQ_CONFIG_TL -lt 8 ]; then
                                 MQ_CONFIG_Error 1013 $MQ_CONFIG_MQVER 6.1 8 && MQ_RETVAL=1
                               fi
                               ;;

                  7.[015]:7.1) ;;

                   7.[15]:6.1) if [ $MQ_CONFIG_TL -lt 5 ]; then
                                 MQ_CONFIG_Error 1013 $MQ_CONFIG_MQVER 6.1 5 && MQ_RETVAL=1
                               fi
                               ;;

                      7.0:6.1) ;;

                      7.0:5.3) SP=`oslevel -s | awk -F- '{print $3}'`

                               if [ $MQ_CONFIG_TL -lt 4 ]; then
                                 MQ_CONFIG_Error 1012 && MQ_RETVAL=1
                               elif [ $MQ_CONFIG_TL -eq 5 -a $SP -lt 2 ]; then
                                 MQ_CONFIG_Error 1012 && MQ_RETVAL=1
                               elif [ $MQ_CONFIG_TL -eq 7 -a $SP -lt 1 ]; then
                                 MQ_CONFIG_Error 1012 && MQ_RETVAL=1
                               fi
                               ;;

                            *) MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER AIX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL && MQ_RETVAL=1
                               ;;
                esac
              fi
              ;;

      Darwin) MQ_CONFIG_OSVER=`sw_vers -productVersion 2>/dev/null`
              case "$MQ_CONFIG_OSVER" in
                 10.0.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Cheetah)"
                         ;;

                 10.1.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Puma)"
                         ;;

                 10.2.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Jaguar)"
                         ;;

                 10.3.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Panther)"
                         ;;

                 10.4.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Tiger)"
                         ;;

                 10.5.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Leopard)"
                         ;;

                 10.6.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Snow Leopard)"
                         ;;

                 10.7.*) MQ_CONFIG_OPSTR="Mac OS X $MQ_CONFIG_OSVER (Lion)"
                         ;;

                 10.8.*) MQ_CONFIG_OPSTR="OS X $MQ_CONFIG_OSVER (Mountain Lion)"
                         ;;

                 10.9.*) MQ_CONFIG_OPSTR="OS X $MQ_CONFIG_OSVER (Mavericks)"
                         ;;

                10.10.*) MQ_CONFIG_OPSTR="OS X $MQ_CONFIG_OSVER (Yosemite)"
                         ;;

                      *) MQ_CONFIG_OPSTR="OS X $MQ_CONFIG_OSVER"
                         ;;
              esac

              MQ_CONFIG_Message 1005 "$MQ_CONFIG_OPSTR" "$MQ_CONFIG_HOSTNAME"

              if [ $MQ_CONFIG_MQVER != Any ]; then
                :
              fi
              ;;


       HP-UX) MQ_CONFIG_OSVER=`uname -r | sed -e 's/B\.//' -e 's/\..*//'`
              MQ_CONFIG_OSREL=`uname -r | sed 's/.*\.//'`

              MQ_CONFIG_CPUVER=`getconf CPU_VERSION 2>/dev/null`

              if [ ${MQ_CONFIG_CPUVER:=0} -eq 523 ]; then
                MQ_CONFIG_ARCH=PA-RISC
              elif [ $MQ_CONFIG_CPUVER -ge 524 -a $MQ_CONFIG_CPUVER -le 526 ]; then
                MQ_CONFIG_ARCH="Motorola 680x0"
              elif [ $MQ_CONFIG_CPUVER -ge 528 -a $MQ_CONFIG_CPUVER -le 767 ]; then
                MQ_CONFIG_ARCH=PA-RISC
              elif [ $MQ_CONFIG_CPUVER -ge 768 ]; then
                MQ_CONFIG_ARCH=Itanium
              else
                MQ_CONFIG_ARCH=Unknown
              fi

              MQ_CONFIG_Message 1005 "HP-UX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL ($MQ_CONFIG_ARCH)" "$MQ_CONFIG_HOSTNAME"

              if [ $MQ_CONFIG_MQVER != Any ]; then
                case $MQ_CONFIG_MQVER:$MQ_CONFIG_OSVER in
                     8.0:11) if [ $MQ_CONFIG_OSREL -lt 31 ]; then
                               MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER HP-UX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL && MQ_RETVAL=1
                             fi
                             ;;

                  7.[15]:11) if [ $MQ_CONFIG_OSREL -lt 31 ]; then
                               MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER HP-UX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL && MQ_RETVAL=1
                             fi
                             ;;

                     7.0:11) if [ $MQ_CONFIG_OSREL -lt 23 ]; then
                               MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER HP-UX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL && MQ_RETVAL=1
                             fi
                             ;;

                          *) MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER HP-UX $MQ_CONFIG_OSVER.$MQ_CONFIG_OSREL && MQ_RETVAL=1
                             ;;
                esac

                case $MQ_CONFIG_MQVER:$MQ_CONFIG_ARCH in
                    *:Itanium) MQ_CONFIG_HPUX_LIBC_PATCH_LEVEL=`what /usr/lib/hpux64/libc.so 2>/dev/null |
                                 grep PHCO_ | sed -e 's/.*PHCO_//' -e 's/ .*//'`
                               ;;

                  7.0:PA-RISC) MQ_CONFIG_HPUX_LIBC_PATCH_LEVEL=`what /usr/lib/hpux64/libc.so 2>/dev/null |
                                 grep PHCO_ | sed -e 's/.*PHCO_//' -e 's/ .*//'`
                               ;;

                            *) MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER $MQ_CONFIG_ARCH hardware && MQ_RETVAL=1
                               ;;
                esac

                if [ ${MQ_CONFIG_HPUX_LIBC_PATCH_LEVEL:=0} -lt 36900 ]; then
                  MQ_CONFIG_Error 1016
                fi
              fi
              ;;

       Linux) MQ_CONFIG_OSVER=`uname -r`
              MQ_CONFIG_ARCH=`uname -p`

              if [ -x /usr/bin/lsb_release ]; then
                MQ_CONFIG_DIST=`/usr/bin/lsb_release -sd 2>/dev/null | env LANG=C tr -d \"`
              elif [ -r /etc/redhat-release ]; then
                MQ_CONFIG_DIST=`head -1 /etc/redhat-release 2>/dev/null`
              elif [ -r /etc/SuSE-release ]; then
                MQ_CONFIG_DIST=`head -1 /etc/SuSE-release 2>/dev/null`
              elif [ -r /etc/UnitedLinux-release ]; then
                MQ_CONFIG_DIST=`head -1 /etc/UnitedLinux-release 2>/dev/null`
              else
                MQ_CONFIG_DIST=`cat /etc/*-release 2>/dev/null | head -1`
              fi

              MQ_CONFIG_Message 1005 "${MQ_CONFIG_DIST:=Unknown Linux ($MQ_CONFIG_ARCH, $MQ_CONFIG_OSVER)}" "$MQ_CONFIG_HOSTNAME"

              if [ $MQ_CONFIG_MQVER != Any ]; then
                :
              fi
              ;;

       SunOS) MQ_CONFIG_OSVER=`uname -r | sed 's/.*\.//'`
              MQ_CONFIG_ARCH=`uname -p`
              PATH=/usr/xpg6/bin:/usr/xpg4/bin:$PATH:/usr/ucb

              MQ_CONFIG_Message 1005 "Solaris $MQ_CONFIG_OSVER ($MQ_CONFIG_ARCH)" "$MQ_CONFIG_HOSTNAME"

              if [ $MQ_CONFIG_MQVER != Any ]; then
                case $MQ_CONFIG_MQVER:$MQ_CONFIG_OSVER in
                      8.0:1[01]) ;;

                  7.[015]:1[01]) ;;

                          7.0:9) if [ $MQ_CONFIG_ARCH != sparc ]; then
                                   MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER $MQ_CONFIG_ARCH hardware && MQ_RETVAL=1
                                 fi
                                 ;;

                              *) MQ_CONFIG_Error 1010 $MQ_CONFIG_MQVER Solaris $MQ_CONFIG_OSVER && MQ_RETVAL=1
                                 ;;
                esac
              fi
              ;;

           *) MQ_CONFIG_Error 1002 `uname -s` && MQ_RETVAL=1
              ;;
    esac
  fi


### Make sure the 'bc' calculator is installed, since it is required to evaluate
### kernel parameters.  If it is present invoke the appropriate operating system
### function to check the system.  Set the exit status based on the warnings and
### failures detected, and use the same MQ_RETVAL variable as setmqenv, since we
### can't remove this one variable before exiting.

  if [ -z "${MQ_RETVAL+X}" ]; then
    printf "quit\n" | bc 1>/dev/null 2>&1  || {
      MQ_CONFIG_Error 1015 bc && exit 1
    }

    eval MQ_CONFIG_Analyze$MQ_CONFIG_OPSYS

    if [ ${MQ_CONFIG_FAILURES:=0} -gt 0 ]; then
      MQ_RETVAL=2
    elif [ ${MQ_CONFIG_WARNINGS:=0} -gt 0 ]; then
      MQ_RETVAL=1
    else
      MQ_RETVAL=0
    fi
  fi


### Restore pre-existing variables and shell options leaving either 'nounset' or
### its doppelganger 'unset' for last, since the wrong setting there can trigger
### failures in the MQ_CONFIG_RestoreShellOption function.

  PATH="$MQ_CONFIG_SAVED_PATH"
  unset MQ_CONFIG_SAVED_PATH

  if [ -n "${MQ_CONFIG_SAVED_OPTIONS+X}" ]; then
    MQ_CONFIG_OPTIONS="$MQ_CONFIG_SAVED_OPTIONS"
    unset MQ_CONFIG_SAVED_OPTIONS
  else      
    unset MQ_CONFIG_OPTIONS
  fi

  MQ_CONFIG_RestoreShellOption shwordsplit

  if set -o 2>/dev/null | grep -w '^unset' 1>/dev/null 2>&1; then
    MQ_CONFIG_RestoreShellOption unset
  else
    MQ_CONFIG_RestoreShellOption nounset
  fi


### Unset all other variables set by this script.

  unset MQ_CONFIG_ABSTRACT MQ_CONFIG_ALERT MQ_CONFIG_ARCH MQ_CONFIG_ARG
  unset MQ_CONFIG_AUTO MQ_CONFIG_CMDLINE_ARGS MQ_CONFIG_COMMALIST
  unset MQ_CONFIG_CMDLINE MQ_CONFIG_CPUVER MQ_CONFIG_CURRENT MQ_CONFIG_DIST
  unset MQ_CONFIG_FAIL MQ_CONFIG_FAILURES MQ_CONFIG_HOSTNAME
  unset MQ_CONFIG_IBM_DATA_SOFT MQ_CONFIG_IBM_FD_CUR MQ_CONFIG_IBM_FD_MAX
  unset MQ_CONFIG_IBM_FILEMAX MQ_CONFIG_IBM_MAXDSIZ64_MIN MQ_CONFIG_IBM_MAXDSIZ_MIN
  unset MQ_CONFIG_IBM_MAXFDS MQ_CONFIG_IBM_MAXFILES MQ_CONFIG_IBM_MAXFILES_LIM
  unset MQ_CONFIG_IBM_MAXSSIZ64_MIN MQ_CONFIG_IBM_MAXSSIZ_MIN
  unset MQ_CONFIG_IBM_MAX_THREAD_PROC MQ_CONFIG_IBM_MAXUPRC MQ_CONFIG_IBM_MAXUPROC
  unset MQ_CONFIG_IBM_NFILE MQ_CONFIG_IBM_NOFILE_HARD MQ_CONFIG_IBM_NOFILES_HARD
  unset MQ_CONFIG_IBM_NOFILE_SOFT MQ_CONFIG_IBM_NOFILES_SOFT
  unset MQ_CONFIG_IBM_NPROC_HARD MQ_CONFIG_IBM_NPROC_SOFT
  unset MQ_CONFIG_IBM_SEMAEM MQ_CONFIG_IBM_SEMAEM_MIN MQ_CONFIG_IBM_SEMMAP
  unset MQ_CONFIG_IBM_SEMMNI MQ_CONFIG_IBM_SEMMNS MQ_CONFIG_IBM_SEMMNU
  unset MQ_CONFIG_IBM_SEMMSL MQ_CONFIG_IBM_SEMMSL_MIN
  unset MQ_CONFIG_IBM_SEMOPM MQ_CONFIG_IBM_SEMOPM_MIN MQ_CONFIG_IBM_SEMUME
  unset MQ_CONFIG_IBM_SEMVMX MQ_CONFIG_IBM_SEMVMX_MIN MQ_CONFIG_IBM_SHMALL
  unset MQ_CONFIG_IBM_SHMMAX MQ_CONFIG_IBM_SHMMAX_MIN
  unset MQ_CONFIG_IBM_SHMMIN MQ_CONFIG_IBM_SHMMIN_MAX
  unset MQ_CONFIG_IBM_SHMMNI MQ_CONFIG_IBM_SHMSEG
  unset MQ_CONFIG_IBM_STACK_SOFT MQ_CONFIG_HPUX_LIBC_PATCH_LEVEL
  unset MQ_CONFIG_LIMIT MQ_CONFIG_LINE MQ_CONFIG_LITERAL
  unset MQ_CONFIG_MQVER MQ_CONFIG_MSGID MQ_CONFIG_NUM MQ_CONFIG_OPSTR
  unset MQ_CONFIG_OPSYS MQ_CONFIG_OPT MQ_CONFIG_OSREL MQ_CONFIG_OSVER
  unset MQ_CONFIG_PAGE_SIZE MQ_CONFIG_PARAM MQ_CONFIG_PASS MQ_CONFIG_PERCENT
  unset MQ_CONFIG_PPID MQ_CONFIG_PROC MQ_CONFIG_PROCPATH MQ_CONFIG_PROJECT
  unset MQ_CONFIG_PROJID MQ_CONFIG_PROJLIST MQ_CONFIG_PS_ARGS MQ_CONFIG_PS_THREAD_FLAG
  unset MQ_CONFIG_SCRIPT MQ_CONFIG_SETTING MQ_CONFIG_SHELL MQ_CONFIG_SHOPT
  unset MQ_CONFIG_SOURCED MQ_CONFIG_SUM unset MQ_CONFIG_SYSDEF_OUTPUT MQ_CONFIG_TL
  unset MQ_CONFIG_UNITS MQ_CONFIG_UNKNOWN MQ_CONFIG_UNLIMITED MQ_CONFIG_USER
  unset MQ_CONFIG_VALUE MQ_CONFIG_WARN MQ_CONFIG_WARNINGS


### Remove all of the shell function defined by mqconfig.

  unset -f MQ_CONFIG_AnalyzeAIX
  unset -f MQ_CONFIG_AnalyzeHPUX
  unset -f MQ_CONFIG_AnalyzeLinux
  unset -f MQ_CONFIG_AnalyzeOSX
  unset -f MQ_CONFIG_AnalyzeSolaris
  unset -f MQ_CONFIG_AnalyzeSolarisV9
  unset -f MQ_CONFIG_CheckShellOptions
  unset -f MQ_CONFIG_DisplayLimit
  unset -f MQ_CONFIG_Error
  unset -f MQ_CONFIG_GetHPUXValue
  unset -f MQ_CONFIG_GetLinuxValue
  unset -f MQ_CONFIG_GetOSXValue
  unset -f MQ_CONFIG_GetResourceUsage
  unset -f MQ_CONFIG_GetSolarisV9Value
  unset -f MQ_CONFIG_GetSolarisValue
  unset -f MQ_CONFIG_Message
  unset -f MQ_CONFIG_PrintHelp
  unset -f MQ_CONFIG_PrintSyntax
  unset -f MQ_CONFIG_RestoreShellOption
  unset -f MQ_CONFIG_SetShellOption
  unset -f MQ_CONFIG_Sum
  unset -f MQ_CONFIG_Trim


### Return nicely to the current or calling shell.

  sh -c "exit $MQ_RETVAL"

