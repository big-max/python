---
- name: Configure ansible inventory
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Add hosts to the group named target_hosts
      add_host: >
        name="{{ item.0 }}" groups=target_hosts ansible_ssh_host="{{ item.1 }}" ipaddr="{{ item.1 }}"  mq_qmgr_name="{{ item.2 }}"
      with_together: 
        - "{{ hostname_list }}"
        - "{{ ip_list }}"
        - "{{ mq_qmgr_list }}"
                         
- name: Install MQ Environment
  hosts: target_hosts
  gather_facts: false
  strategy: linear
  tags:
    - install
  tasks:
    - name: Update the hostname of target servers
      hostname: name="{{ inventory_hostname }}"
    - name: Add hostname to the file /etc/hosts
      lineinfile: dest=/etc/hosts regexp='^{{ item.0 }}.*{{ item.1 }}'  line="{{ item.0 }}        {{ item.1 }}" state=present backup=yes
      with_together: 
          - "{{ ip_list }}"
          - "{{ hostname_list }}"
    - name: Configure sysctl parameter
      sysctl: name={{ item.key }} value={{ item.value }} sysctl_set=yes reload=yes
      with_dict: "{{ os_para_sysctl }}"
    - name: Configure system ulimit parameters
      ulimit: domain="{{ mq_user }}" type='-' item="{{ item.key }}" value="{{ item.value }}"
      with_dict: "{{ os_para_ulimit }}"
    - name: Create temp download directory
      file: path="{{ downloadpath }}/{{ mq_version }}/fix" state=directory mode=0755
    - name: Download and Unarchive MQ binary files
      unarchive: src="{{ item }}" dest="{{ downloadpath }}/{{ mq_version }}" copy=yes creates=download_done
      with_fileglob:
        - "{{ softpath }}/{{ mq_version }}/{{ mq_binary }}"
    - name: Download and Unarchive MQ fixpack files
      unarchive: src="{{ item }}" dest="{{ downloadpath }}/{{ mq_version }}/fix" copy=yes creates=download_done
      with_fileglob:
        - "{{ softpath }}/{{ mq_version }}/{{ mq_fp }}"
      when: mq_fp !='-'
    - name: Accept MQ product license
      shell: "{{ downloadpath }}/{{ mq_version }}/mqlicense.sh -accept"
    - name: Install MQ binary
      shell: rpm --prefix "{{ mq_inst_path }}" -ivh "{{ downloadpath }}/{{ mq_version }}/{{ mq_rpm }}"
    - name: Install MQ fixpack
      shell: rpm -Uvh "{{ downloadpath }}/{{ mq_version }}/fix/{{ mq_rpm }}"
      when: mq_fp != '-'
    - name: Add the pre-defined MQ user if it's not mqm
      user: name="{{ mq_user }}" groups=mqm append=yes
      when: mq_user != 'mqm'
                                    
- name: Build MQ Environment
  hosts: target_hosts
  gather_facts: false
  become_user: "{{ mq_user }}"
  become: yes
  become_method: su
  strategy: linear
  tags:
    - build
  environment:
      PATH: "{{ mq_inst_path }}/bin"
  tasks:
    - name: Setup MQ environment variables for MQ user
      lineinfile: >
         dest="~{{ mq_user }}/.bash_profile" regexp='setmqenv'  line="source {{ mq_inst_path }}/bin/setmqenv -p {{ mq_inst_path }} -k"
         state=present backup=yes create=yes
    - name: Create Queue Manager data and log folders
      file: path="{{ item }}" state=directory mode=0755
      with_items:
        - "{{ mq_data_path }}"
        - "{{ mq_log_path }}"
    - name: Create Queue Managers instance
      command: >
          crtmqm -md "{{ mq_data_path }}" -ld "{{ mq_log_path }}" -lc -lf "{{ mq_log_psize }}"
          -lp "{{ mq_qmgr_plog }}" -ls "{{ mq_qmgr_slog }}"  "{{ mq_qmgr_name }}"
    - name: Append one blank line to qm ini file
      shell: echo " " >> "{{ mq_data_path }}/{{ mq_qmgr_name }}/qm.ini"
    - name: Start up Queue Manager instance
      command: strmqm "{{ mq_qmgr_name }}"
    - name: Configure Queue Manager ini file
      blockinfile:
         dest: "{{ mq_data_path }}/{{ mq_qmgr_name }}/qm.ini"
         marker: ""
         block: |
           Channels:
              MaxChannels={{ mq_chl_max }}
              MaxActiveChannels={{ mq_chl_max }}
           TCP:
              KeepAlive={{ mq_chl_kalive }}
    - name: Configure the full repository of MQ Cluster
      shell: echo "ALTER QMGR REPOS({{ mq_cluster }})" | runmqsc "{{ mq_qmgr_name }}"
      with_dict: "{{ mq_fullRep }}"
      when: item.value == mq_qmgr_name
    - name: Create Queue Manager Objects
      shell: echo "{{ item }}" | runmqsc {{ mq_qmgr_name }}
      with_items:
         - "DEF LSTR(CLUS_LISTEN) TRPTYPE(TCP) PORT({{ mq_lstr_port }}) CONTROL(QMGR) REPLACE"
         - "DEF CHL(TO.{{ mq_qmgr_name }}) CHLTYPE(CLUSRCVR) TRPTYPE(TCP) CONNAME('{{ ipaddr }}({{ mq_lstr_port }})') CLUSTER({{ mq_cluster }}) REPLACE"
    - name: Create Queue Manager Objects continue
      shell: >
        echo "DEF CHL(TO.{{ item.value }}) CHLTYPE(CLUSSDR) CONNAME('{{item.key}}({{ mq_lstr_port }})') TRPTYPE(TCP) CLUSTER({{ mq_cluster }}) REPLACE" | runmqsc {{ mq_qmgr_name }}
      with_dict: "{{ mq_fullRep }}"
      when: item.value != mq_qmgr_name

- name: Restart MQ Environment
  hosts: target_hosts
  gather_facts: false
  become_user: "{{ mq_user }}"
  become: yes
  become_method: su
  strategy: linear
  tags:
    - restart
  environment:
      PATH: "{{ mq_inst_path }}/bin"
  tasks:
    - name: stop QMGRs
      command: endmqm -i "{{ mq_qmgr_name }}"
      register: result
    - name: start QMGRs
      command: strmqm "{{ mq_qmgr_name }}"
      when: result.rc == 0
